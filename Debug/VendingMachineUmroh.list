
VendingMachineUmroh.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e84  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  08002f90  08002f90  00012f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003108  08003108  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08003108  08003108  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003108  08003108  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003108  08003108  00013108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800310c  0800310c  0001310c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08003110  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000078  08003188  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  08003188  000200f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008cae  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001802  00000000  00000000  00028d4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009b0  00000000  00000000  0002a558  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008d8  00000000  00000000  0002af08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001444b  00000000  00000000  0002b7e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007416  00000000  00000000  0003fc2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000700ca  00000000  00000000  00047041  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b710b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a2c  00000000  00000000  000b7188  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08002f78 	.word	0x08002f78

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08002f78 	.word	0x08002f78

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f945 	bl	80003ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f002 f9b0 	bl	80024cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f95d 	bl	8000456 <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295
 80001b4:	f000 f925 	bl	8000402 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000010 	.word	0x20000010
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	200000a4 	.word	0x200000a4

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	200000a4 	.word	0x200000a4

08000210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000218:	f7ff fff0 	bl	80001fc <HAL_GetTick>
 800021c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000228:	d005      	beq.n	8000236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800022a:	4b09      	ldr	r3, [pc, #36]	; (8000250 <HAL_Delay+0x40>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	461a      	mov	r2, r3
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	4413      	add	r3, r2
 8000234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000236:	bf00      	nop
 8000238:	f7ff ffe0 	bl	80001fc <HAL_GetTick>
 800023c:	4602      	mov	r2, r0
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	1ad3      	subs	r3, r2, r3
 8000242:	68fa      	ldr	r2, [r7, #12]
 8000244:	429a      	cmp	r2, r3
 8000246:	d8f7      	bhi.n	8000238 <HAL_Delay+0x28>
  {
  }
}
 8000248:	bf00      	nop
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000004 	.word	0x20000004

08000254 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000254:	b480      	push	{r7}
 8000256:	b085      	sub	sp, #20
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f003 0307 	and.w	r3, r3, #7
 8000262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000264:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <__NVIC_SetPriorityGrouping+0x44>)
 8000266:	68db      	ldr	r3, [r3, #12]
 8000268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800026a:	68ba      	ldr	r2, [r7, #8]
 800026c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000270:	4013      	ands	r3, r2
 8000272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800027c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000286:	4a04      	ldr	r2, [pc, #16]	; (8000298 <__NVIC_SetPriorityGrouping+0x44>)
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	60d3      	str	r3, [r2, #12]
}
 800028c:	bf00      	nop
 800028e:	3714      	adds	r7, #20
 8000290:	46bd      	mov	sp, r7
 8000292:	bc80      	pop	{r7}
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	e000ed00 	.word	0xe000ed00

0800029c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__NVIC_GetPriorityGrouping+0x18>)
 80002a2:	68db      	ldr	r3, [r3, #12]
 80002a4:	0a1b      	lsrs	r3, r3, #8
 80002a6:	f003 0307 	and.w	r3, r3, #7
}
 80002aa:	4618      	mov	r0, r3
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	e000ed00 	.word	0xe000ed00

080002b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	db0b      	blt.n	80002e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002ca:	79fb      	ldrb	r3, [r7, #7]
 80002cc:	f003 021f 	and.w	r2, r3, #31
 80002d0:	4906      	ldr	r1, [pc, #24]	; (80002ec <__NVIC_EnableIRQ+0x34>)
 80002d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d6:	095b      	lsrs	r3, r3, #5
 80002d8:	2001      	movs	r0, #1
 80002da:	fa00 f202 	lsl.w	r2, r0, r2
 80002de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002e2:	bf00      	nop
 80002e4:	370c      	adds	r7, #12
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bc80      	pop	{r7}
 80002ea:	4770      	bx	lr
 80002ec:	e000e100 	.word	0xe000e100

080002f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	4603      	mov	r3, r0
 80002f8:	6039      	str	r1, [r7, #0]
 80002fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000300:	2b00      	cmp	r3, #0
 8000302:	db0a      	blt.n	800031a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000304:	683b      	ldr	r3, [r7, #0]
 8000306:	b2da      	uxtb	r2, r3
 8000308:	490c      	ldr	r1, [pc, #48]	; (800033c <__NVIC_SetPriority+0x4c>)
 800030a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800030e:	0112      	lsls	r2, r2, #4
 8000310:	b2d2      	uxtb	r2, r2
 8000312:	440b      	add	r3, r1
 8000314:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000318:	e00a      	b.n	8000330 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800031a:	683b      	ldr	r3, [r7, #0]
 800031c:	b2da      	uxtb	r2, r3
 800031e:	4908      	ldr	r1, [pc, #32]	; (8000340 <__NVIC_SetPriority+0x50>)
 8000320:	79fb      	ldrb	r3, [r7, #7]
 8000322:	f003 030f 	and.w	r3, r3, #15
 8000326:	3b04      	subs	r3, #4
 8000328:	0112      	lsls	r2, r2, #4
 800032a:	b2d2      	uxtb	r2, r2
 800032c:	440b      	add	r3, r1
 800032e:	761a      	strb	r2, [r3, #24]
}
 8000330:	bf00      	nop
 8000332:	370c      	adds	r7, #12
 8000334:	46bd      	mov	sp, r7
 8000336:	bc80      	pop	{r7}
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	e000e100 	.word	0xe000e100
 8000340:	e000ed00 	.word	0xe000ed00

08000344 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000344:	b480      	push	{r7}
 8000346:	b089      	sub	sp, #36	; 0x24
 8000348:	af00      	add	r7, sp, #0
 800034a:	60f8      	str	r0, [r7, #12]
 800034c:	60b9      	str	r1, [r7, #8]
 800034e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	f003 0307 	and.w	r3, r3, #7
 8000356:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000358:	69fb      	ldr	r3, [r7, #28]
 800035a:	f1c3 0307 	rsb	r3, r3, #7
 800035e:	2b04      	cmp	r3, #4
 8000360:	bf28      	it	cs
 8000362:	2304      	movcs	r3, #4
 8000364:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000366:	69fb      	ldr	r3, [r7, #28]
 8000368:	3304      	adds	r3, #4
 800036a:	2b06      	cmp	r3, #6
 800036c:	d902      	bls.n	8000374 <NVIC_EncodePriority+0x30>
 800036e:	69fb      	ldr	r3, [r7, #28]
 8000370:	3b03      	subs	r3, #3
 8000372:	e000      	b.n	8000376 <NVIC_EncodePriority+0x32>
 8000374:	2300      	movs	r3, #0
 8000376:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000378:	f04f 32ff 	mov.w	r2, #4294967295
 800037c:	69bb      	ldr	r3, [r7, #24]
 800037e:	fa02 f303 	lsl.w	r3, r2, r3
 8000382:	43da      	mvns	r2, r3
 8000384:	68bb      	ldr	r3, [r7, #8]
 8000386:	401a      	ands	r2, r3
 8000388:	697b      	ldr	r3, [r7, #20]
 800038a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800038c:	f04f 31ff 	mov.w	r1, #4294967295
 8000390:	697b      	ldr	r3, [r7, #20]
 8000392:	fa01 f303 	lsl.w	r3, r1, r3
 8000396:	43d9      	mvns	r1, r3
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800039c:	4313      	orrs	r3, r2
         );
}
 800039e:	4618      	mov	r0, r3
 80003a0:	3724      	adds	r7, #36	; 0x24
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bc80      	pop	{r7}
 80003a6:	4770      	bx	lr

080003a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	3b01      	subs	r3, #1
 80003b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80003b8:	d301      	bcc.n	80003be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003ba:	2301      	movs	r3, #1
 80003bc:	e00f      	b.n	80003de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003be:	4a0a      	ldr	r2, [pc, #40]	; (80003e8 <SysTick_Config+0x40>)
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	3b01      	subs	r3, #1
 80003c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003c6:	210f      	movs	r1, #15
 80003c8:	f04f 30ff 	mov.w	r0, #4294967295
 80003cc:	f7ff ff90 	bl	80002f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003d0:	4b05      	ldr	r3, [pc, #20]	; (80003e8 <SysTick_Config+0x40>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003d6:	4b04      	ldr	r3, [pc, #16]	; (80003e8 <SysTick_Config+0x40>)
 80003d8:	2207      	movs	r2, #7
 80003da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003dc:	2300      	movs	r3, #0
}
 80003de:	4618      	mov	r0, r3
 80003e0:	3708      	adds	r7, #8
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	e000e010 	.word	0xe000e010

080003ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003f4:	6878      	ldr	r0, [r7, #4]
 80003f6:	f7ff ff2d 	bl	8000254 <__NVIC_SetPriorityGrouping>
}
 80003fa:	bf00      	nop
 80003fc:	3708      	adds	r7, #8
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}

08000402 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000402:	b580      	push	{r7, lr}
 8000404:	b086      	sub	sp, #24
 8000406:	af00      	add	r7, sp, #0
 8000408:	4603      	mov	r3, r0
 800040a:	60b9      	str	r1, [r7, #8]
 800040c:	607a      	str	r2, [r7, #4]
 800040e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000410:	2300      	movs	r3, #0
 8000412:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000414:	f7ff ff42 	bl	800029c <__NVIC_GetPriorityGrouping>
 8000418:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800041a:	687a      	ldr	r2, [r7, #4]
 800041c:	68b9      	ldr	r1, [r7, #8]
 800041e:	6978      	ldr	r0, [r7, #20]
 8000420:	f7ff ff90 	bl	8000344 <NVIC_EncodePriority>
 8000424:	4602      	mov	r2, r0
 8000426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800042a:	4611      	mov	r1, r2
 800042c:	4618      	mov	r0, r3
 800042e:	f7ff ff5f 	bl	80002f0 <__NVIC_SetPriority>
}
 8000432:	bf00      	nop
 8000434:	3718      	adds	r7, #24
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}

0800043a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800043a:	b580      	push	{r7, lr}
 800043c:	b082      	sub	sp, #8
 800043e:	af00      	add	r7, sp, #0
 8000440:	4603      	mov	r3, r0
 8000442:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000448:	4618      	mov	r0, r3
 800044a:	f7ff ff35 	bl	80002b8 <__NVIC_EnableIRQ>
}
 800044e:	bf00      	nop
 8000450:	3708      	adds	r7, #8
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}

08000456 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000456:	b580      	push	{r7, lr}
 8000458:	b082      	sub	sp, #8
 800045a:	af00      	add	r7, sp, #0
 800045c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800045e:	6878      	ldr	r0, [r7, #4]
 8000460:	f7ff ffa2 	bl	80003a8 <SysTick_Config>
 8000464:	4603      	mov	r3, r0
}
 8000466:	4618      	mov	r0, r3
 8000468:	3708      	adds	r7, #8
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
	...

08000470 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000470:	b480      	push	{r7}
 8000472:	b08b      	sub	sp, #44	; 0x2c
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
 8000478:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800047a:	2300      	movs	r3, #0
 800047c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800047e:	2300      	movs	r3, #0
 8000480:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000482:	e127      	b.n	80006d4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000484:	2201      	movs	r2, #1
 8000486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000488:	fa02 f303 	lsl.w	r3, r2, r3
 800048c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800048e:	683b      	ldr	r3, [r7, #0]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	69fa      	ldr	r2, [r7, #28]
 8000494:	4013      	ands	r3, r2
 8000496:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000498:	69ba      	ldr	r2, [r7, #24]
 800049a:	69fb      	ldr	r3, [r7, #28]
 800049c:	429a      	cmp	r2, r3
 800049e:	f040 8116 	bne.w	80006ce <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80004a2:	683b      	ldr	r3, [r7, #0]
 80004a4:	685b      	ldr	r3, [r3, #4]
 80004a6:	2b12      	cmp	r3, #18
 80004a8:	d034      	beq.n	8000514 <HAL_GPIO_Init+0xa4>
 80004aa:	2b12      	cmp	r3, #18
 80004ac:	d80d      	bhi.n	80004ca <HAL_GPIO_Init+0x5a>
 80004ae:	2b02      	cmp	r3, #2
 80004b0:	d02b      	beq.n	800050a <HAL_GPIO_Init+0x9a>
 80004b2:	2b02      	cmp	r3, #2
 80004b4:	d804      	bhi.n	80004c0 <HAL_GPIO_Init+0x50>
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d031      	beq.n	800051e <HAL_GPIO_Init+0xae>
 80004ba:	2b01      	cmp	r3, #1
 80004bc:	d01c      	beq.n	80004f8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80004be:	e048      	b.n	8000552 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80004c0:	2b03      	cmp	r3, #3
 80004c2:	d043      	beq.n	800054c <HAL_GPIO_Init+0xdc>
 80004c4:	2b11      	cmp	r3, #17
 80004c6:	d01b      	beq.n	8000500 <HAL_GPIO_Init+0x90>
          break;
 80004c8:	e043      	b.n	8000552 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80004ca:	4a89      	ldr	r2, [pc, #548]	; (80006f0 <HAL_GPIO_Init+0x280>)
 80004cc:	4293      	cmp	r3, r2
 80004ce:	d026      	beq.n	800051e <HAL_GPIO_Init+0xae>
 80004d0:	4a87      	ldr	r2, [pc, #540]	; (80006f0 <HAL_GPIO_Init+0x280>)
 80004d2:	4293      	cmp	r3, r2
 80004d4:	d806      	bhi.n	80004e4 <HAL_GPIO_Init+0x74>
 80004d6:	4a87      	ldr	r2, [pc, #540]	; (80006f4 <HAL_GPIO_Init+0x284>)
 80004d8:	4293      	cmp	r3, r2
 80004da:	d020      	beq.n	800051e <HAL_GPIO_Init+0xae>
 80004dc:	4a86      	ldr	r2, [pc, #536]	; (80006f8 <HAL_GPIO_Init+0x288>)
 80004de:	4293      	cmp	r3, r2
 80004e0:	d01d      	beq.n	800051e <HAL_GPIO_Init+0xae>
          break;
 80004e2:	e036      	b.n	8000552 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80004e4:	4a85      	ldr	r2, [pc, #532]	; (80006fc <HAL_GPIO_Init+0x28c>)
 80004e6:	4293      	cmp	r3, r2
 80004e8:	d019      	beq.n	800051e <HAL_GPIO_Init+0xae>
 80004ea:	4a85      	ldr	r2, [pc, #532]	; (8000700 <HAL_GPIO_Init+0x290>)
 80004ec:	4293      	cmp	r3, r2
 80004ee:	d016      	beq.n	800051e <HAL_GPIO_Init+0xae>
 80004f0:	4a84      	ldr	r2, [pc, #528]	; (8000704 <HAL_GPIO_Init+0x294>)
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d013      	beq.n	800051e <HAL_GPIO_Init+0xae>
          break;
 80004f6:	e02c      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80004f8:	683b      	ldr	r3, [r7, #0]
 80004fa:	68db      	ldr	r3, [r3, #12]
 80004fc:	623b      	str	r3, [r7, #32]
          break;
 80004fe:	e028      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	68db      	ldr	r3, [r3, #12]
 8000504:	3304      	adds	r3, #4
 8000506:	623b      	str	r3, [r7, #32]
          break;
 8000508:	e023      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	68db      	ldr	r3, [r3, #12]
 800050e:	3308      	adds	r3, #8
 8000510:	623b      	str	r3, [r7, #32]
          break;
 8000512:	e01e      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	68db      	ldr	r3, [r3, #12]
 8000518:	330c      	adds	r3, #12
 800051a:	623b      	str	r3, [r7, #32]
          break;
 800051c:	e019      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	689b      	ldr	r3, [r3, #8]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d102      	bne.n	800052c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000526:	2304      	movs	r3, #4
 8000528:	623b      	str	r3, [r7, #32]
          break;
 800052a:	e012      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	689b      	ldr	r3, [r3, #8]
 8000530:	2b01      	cmp	r3, #1
 8000532:	d105      	bne.n	8000540 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000534:	2308      	movs	r3, #8
 8000536:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	69fa      	ldr	r2, [r7, #28]
 800053c:	611a      	str	r2, [r3, #16]
          break;
 800053e:	e008      	b.n	8000552 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000540:	2308      	movs	r3, #8
 8000542:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	69fa      	ldr	r2, [r7, #28]
 8000548:	615a      	str	r2, [r3, #20]
          break;
 800054a:	e002      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800054c:	2300      	movs	r3, #0
 800054e:	623b      	str	r3, [r7, #32]
          break;
 8000550:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000552:	69bb      	ldr	r3, [r7, #24]
 8000554:	2bff      	cmp	r3, #255	; 0xff
 8000556:	d801      	bhi.n	800055c <HAL_GPIO_Init+0xec>
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	e001      	b.n	8000560 <HAL_GPIO_Init+0xf0>
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	3304      	adds	r3, #4
 8000560:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000562:	69bb      	ldr	r3, [r7, #24]
 8000564:	2bff      	cmp	r3, #255	; 0xff
 8000566:	d802      	bhi.n	800056e <HAL_GPIO_Init+0xfe>
 8000568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800056a:	009b      	lsls	r3, r3, #2
 800056c:	e002      	b.n	8000574 <HAL_GPIO_Init+0x104>
 800056e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000570:	3b08      	subs	r3, #8
 8000572:	009b      	lsls	r3, r3, #2
 8000574:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000576:	697b      	ldr	r3, [r7, #20]
 8000578:	681a      	ldr	r2, [r3, #0]
 800057a:	210f      	movs	r1, #15
 800057c:	693b      	ldr	r3, [r7, #16]
 800057e:	fa01 f303 	lsl.w	r3, r1, r3
 8000582:	43db      	mvns	r3, r3
 8000584:	401a      	ands	r2, r3
 8000586:	6a39      	ldr	r1, [r7, #32]
 8000588:	693b      	ldr	r3, [r7, #16]
 800058a:	fa01 f303 	lsl.w	r3, r1, r3
 800058e:	431a      	orrs	r2, r3
 8000590:	697b      	ldr	r3, [r7, #20]
 8000592:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	685b      	ldr	r3, [r3, #4]
 8000598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800059c:	2b00      	cmp	r3, #0
 800059e:	f000 8096 	beq.w	80006ce <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80005a2:	4b59      	ldr	r3, [pc, #356]	; (8000708 <HAL_GPIO_Init+0x298>)
 80005a4:	699b      	ldr	r3, [r3, #24]
 80005a6:	4a58      	ldr	r2, [pc, #352]	; (8000708 <HAL_GPIO_Init+0x298>)
 80005a8:	f043 0301 	orr.w	r3, r3, #1
 80005ac:	6193      	str	r3, [r2, #24]
 80005ae:	4b56      	ldr	r3, [pc, #344]	; (8000708 <HAL_GPIO_Init+0x298>)
 80005b0:	699b      	ldr	r3, [r3, #24]
 80005b2:	f003 0301 	and.w	r3, r3, #1
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80005ba:	4a54      	ldr	r2, [pc, #336]	; (800070c <HAL_GPIO_Init+0x29c>)
 80005bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005be:	089b      	lsrs	r3, r3, #2
 80005c0:	3302      	adds	r3, #2
 80005c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005c6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80005c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ca:	f003 0303 	and.w	r3, r3, #3
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	220f      	movs	r2, #15
 80005d2:	fa02 f303 	lsl.w	r3, r2, r3
 80005d6:	43db      	mvns	r3, r3
 80005d8:	68fa      	ldr	r2, [r7, #12]
 80005da:	4013      	ands	r3, r2
 80005dc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4a4b      	ldr	r2, [pc, #300]	; (8000710 <HAL_GPIO_Init+0x2a0>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d013      	beq.n	800060e <HAL_GPIO_Init+0x19e>
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4a4a      	ldr	r2, [pc, #296]	; (8000714 <HAL_GPIO_Init+0x2a4>)
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d00d      	beq.n	800060a <HAL_GPIO_Init+0x19a>
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	4a49      	ldr	r2, [pc, #292]	; (8000718 <HAL_GPIO_Init+0x2a8>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d007      	beq.n	8000606 <HAL_GPIO_Init+0x196>
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	4a48      	ldr	r2, [pc, #288]	; (800071c <HAL_GPIO_Init+0x2ac>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d101      	bne.n	8000602 <HAL_GPIO_Init+0x192>
 80005fe:	2303      	movs	r3, #3
 8000600:	e006      	b.n	8000610 <HAL_GPIO_Init+0x1a0>
 8000602:	2304      	movs	r3, #4
 8000604:	e004      	b.n	8000610 <HAL_GPIO_Init+0x1a0>
 8000606:	2302      	movs	r3, #2
 8000608:	e002      	b.n	8000610 <HAL_GPIO_Init+0x1a0>
 800060a:	2301      	movs	r3, #1
 800060c:	e000      	b.n	8000610 <HAL_GPIO_Init+0x1a0>
 800060e:	2300      	movs	r3, #0
 8000610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000612:	f002 0203 	and.w	r2, r2, #3
 8000616:	0092      	lsls	r2, r2, #2
 8000618:	4093      	lsls	r3, r2
 800061a:	68fa      	ldr	r2, [r7, #12]
 800061c:	4313      	orrs	r3, r2
 800061e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000620:	493a      	ldr	r1, [pc, #232]	; (800070c <HAL_GPIO_Init+0x29c>)
 8000622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000624:	089b      	lsrs	r3, r3, #2
 8000626:	3302      	adds	r3, #2
 8000628:	68fa      	ldr	r2, [r7, #12]
 800062a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	685b      	ldr	r3, [r3, #4]
 8000632:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000636:	2b00      	cmp	r3, #0
 8000638:	d006      	beq.n	8000648 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800063a:	4b39      	ldr	r3, [pc, #228]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 800063c:	681a      	ldr	r2, [r3, #0]
 800063e:	4938      	ldr	r1, [pc, #224]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 8000640:	69bb      	ldr	r3, [r7, #24]
 8000642:	4313      	orrs	r3, r2
 8000644:	600b      	str	r3, [r1, #0]
 8000646:	e006      	b.n	8000656 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000648:	4b35      	ldr	r3, [pc, #212]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 800064a:	681a      	ldr	r2, [r3, #0]
 800064c:	69bb      	ldr	r3, [r7, #24]
 800064e:	43db      	mvns	r3, r3
 8000650:	4933      	ldr	r1, [pc, #204]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 8000652:	4013      	ands	r3, r2
 8000654:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	685b      	ldr	r3, [r3, #4]
 800065a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800065e:	2b00      	cmp	r3, #0
 8000660:	d006      	beq.n	8000670 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000662:	4b2f      	ldr	r3, [pc, #188]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 8000664:	685a      	ldr	r2, [r3, #4]
 8000666:	492e      	ldr	r1, [pc, #184]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 8000668:	69bb      	ldr	r3, [r7, #24]
 800066a:	4313      	orrs	r3, r2
 800066c:	604b      	str	r3, [r1, #4]
 800066e:	e006      	b.n	800067e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000670:	4b2b      	ldr	r3, [pc, #172]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 8000672:	685a      	ldr	r2, [r3, #4]
 8000674:	69bb      	ldr	r3, [r7, #24]
 8000676:	43db      	mvns	r3, r3
 8000678:	4929      	ldr	r1, [pc, #164]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 800067a:	4013      	ands	r3, r2
 800067c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	685b      	ldr	r3, [r3, #4]
 8000682:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000686:	2b00      	cmp	r3, #0
 8000688:	d006      	beq.n	8000698 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800068a:	4b25      	ldr	r3, [pc, #148]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 800068c:	689a      	ldr	r2, [r3, #8]
 800068e:	4924      	ldr	r1, [pc, #144]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 8000690:	69bb      	ldr	r3, [r7, #24]
 8000692:	4313      	orrs	r3, r2
 8000694:	608b      	str	r3, [r1, #8]
 8000696:	e006      	b.n	80006a6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000698:	4b21      	ldr	r3, [pc, #132]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 800069a:	689a      	ldr	r2, [r3, #8]
 800069c:	69bb      	ldr	r3, [r7, #24]
 800069e:	43db      	mvns	r3, r3
 80006a0:	491f      	ldr	r1, [pc, #124]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 80006a2:	4013      	ands	r3, r2
 80006a4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	685b      	ldr	r3, [r3, #4]
 80006aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d006      	beq.n	80006c0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80006b2:	4b1b      	ldr	r3, [pc, #108]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 80006b4:	68da      	ldr	r2, [r3, #12]
 80006b6:	491a      	ldr	r1, [pc, #104]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 80006b8:	69bb      	ldr	r3, [r7, #24]
 80006ba:	4313      	orrs	r3, r2
 80006bc:	60cb      	str	r3, [r1, #12]
 80006be:	e006      	b.n	80006ce <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80006c0:	4b17      	ldr	r3, [pc, #92]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 80006c2:	68da      	ldr	r2, [r3, #12]
 80006c4:	69bb      	ldr	r3, [r7, #24]
 80006c6:	43db      	mvns	r3, r3
 80006c8:	4915      	ldr	r1, [pc, #84]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 80006ca:	4013      	ands	r3, r2
 80006cc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80006ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d0:	3301      	adds	r3, #1
 80006d2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	681a      	ldr	r2, [r3, #0]
 80006d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006da:	fa22 f303 	lsr.w	r3, r2, r3
 80006de:	2b00      	cmp	r3, #0
 80006e0:	f47f aed0 	bne.w	8000484 <HAL_GPIO_Init+0x14>
  }
}
 80006e4:	bf00      	nop
 80006e6:	372c      	adds	r7, #44	; 0x2c
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bc80      	pop	{r7}
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	10210000 	.word	0x10210000
 80006f4:	10110000 	.word	0x10110000
 80006f8:	10120000 	.word	0x10120000
 80006fc:	10310000 	.word	0x10310000
 8000700:	10320000 	.word	0x10320000
 8000704:	10220000 	.word	0x10220000
 8000708:	40021000 	.word	0x40021000
 800070c:	40010000 	.word	0x40010000
 8000710:	40010800 	.word	0x40010800
 8000714:	40010c00 	.word	0x40010c00
 8000718:	40011000 	.word	0x40011000
 800071c:	40011400 	.word	0x40011400
 8000720:	40010400 	.word	0x40010400

08000724 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000724:	b480      	push	{r7}
 8000726:	b085      	sub	sp, #20
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	460b      	mov	r3, r1
 800072e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	689a      	ldr	r2, [r3, #8]
 8000734:	887b      	ldrh	r3, [r7, #2]
 8000736:	4013      	ands	r3, r2
 8000738:	2b00      	cmp	r3, #0
 800073a:	d002      	beq.n	8000742 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800073c:	2301      	movs	r3, #1
 800073e:	73fb      	strb	r3, [r7, #15]
 8000740:	e001      	b.n	8000746 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000742:	2300      	movs	r3, #0
 8000744:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000746:	7bfb      	ldrb	r3, [r7, #15]
}
 8000748:	4618      	mov	r0, r3
 800074a:	3714      	adds	r7, #20
 800074c:	46bd      	mov	sp, r7
 800074e:	bc80      	pop	{r7}
 8000750:	4770      	bx	lr

08000752 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000752:	b480      	push	{r7}
 8000754:	b083      	sub	sp, #12
 8000756:	af00      	add	r7, sp, #0
 8000758:	6078      	str	r0, [r7, #4]
 800075a:	460b      	mov	r3, r1
 800075c:	807b      	strh	r3, [r7, #2]
 800075e:	4613      	mov	r3, r2
 8000760:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000762:	787b      	ldrb	r3, [r7, #1]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d003      	beq.n	8000770 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000768:	887a      	ldrh	r2, [r7, #2]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800076e:	e003      	b.n	8000778 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000770:	887b      	ldrh	r3, [r7, #2]
 8000772:	041a      	lsls	r2, r3, #16
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	611a      	str	r2, [r3, #16]
}
 8000778:	bf00      	nop
 800077a:	370c      	adds	r7, #12
 800077c:	46bd      	mov	sp, r7
 800077e:	bc80      	pop	{r7}
 8000780:	4770      	bx	lr
	...

08000784 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b086      	sub	sp, #24
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d101      	bne.n	8000796 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000792:	2301      	movs	r3, #1
 8000794:	e26c      	b.n	8000c70 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	2b00      	cmp	r3, #0
 80007a0:	f000 8087 	beq.w	80008b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80007a4:	4b92      	ldr	r3, [pc, #584]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 80007a6:	685b      	ldr	r3, [r3, #4]
 80007a8:	f003 030c 	and.w	r3, r3, #12
 80007ac:	2b04      	cmp	r3, #4
 80007ae:	d00c      	beq.n	80007ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80007b0:	4b8f      	ldr	r3, [pc, #572]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 80007b2:	685b      	ldr	r3, [r3, #4]
 80007b4:	f003 030c 	and.w	r3, r3, #12
 80007b8:	2b08      	cmp	r3, #8
 80007ba:	d112      	bne.n	80007e2 <HAL_RCC_OscConfig+0x5e>
 80007bc:	4b8c      	ldr	r3, [pc, #560]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 80007be:	685b      	ldr	r3, [r3, #4]
 80007c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007c8:	d10b      	bne.n	80007e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80007ca:	4b89      	ldr	r3, [pc, #548]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d06c      	beq.n	80008b0 <HAL_RCC_OscConfig+0x12c>
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	685b      	ldr	r3, [r3, #4]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d168      	bne.n	80008b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80007de:	2301      	movs	r3, #1
 80007e0:	e246      	b.n	8000c70 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	685b      	ldr	r3, [r3, #4]
 80007e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007ea:	d106      	bne.n	80007fa <HAL_RCC_OscConfig+0x76>
 80007ec:	4b80      	ldr	r3, [pc, #512]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a7f      	ldr	r2, [pc, #508]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 80007f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007f6:	6013      	str	r3, [r2, #0]
 80007f8:	e02e      	b.n	8000858 <HAL_RCC_OscConfig+0xd4>
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	685b      	ldr	r3, [r3, #4]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d10c      	bne.n	800081c <HAL_RCC_OscConfig+0x98>
 8000802:	4b7b      	ldr	r3, [pc, #492]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4a7a      	ldr	r2, [pc, #488]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 8000808:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800080c:	6013      	str	r3, [r2, #0]
 800080e:	4b78      	ldr	r3, [pc, #480]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4a77      	ldr	r2, [pc, #476]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 8000814:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000818:	6013      	str	r3, [r2, #0]
 800081a:	e01d      	b.n	8000858 <HAL_RCC_OscConfig+0xd4>
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000824:	d10c      	bne.n	8000840 <HAL_RCC_OscConfig+0xbc>
 8000826:	4b72      	ldr	r3, [pc, #456]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a71      	ldr	r2, [pc, #452]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 800082c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000830:	6013      	str	r3, [r2, #0]
 8000832:	4b6f      	ldr	r3, [pc, #444]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4a6e      	ldr	r2, [pc, #440]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 8000838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800083c:	6013      	str	r3, [r2, #0]
 800083e:	e00b      	b.n	8000858 <HAL_RCC_OscConfig+0xd4>
 8000840:	4b6b      	ldr	r3, [pc, #428]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a6a      	ldr	r2, [pc, #424]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 8000846:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800084a:	6013      	str	r3, [r2, #0]
 800084c:	4b68      	ldr	r3, [pc, #416]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a67      	ldr	r2, [pc, #412]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 8000852:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000856:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d013      	beq.n	8000888 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000860:	f7ff fccc 	bl	80001fc <HAL_GetTick>
 8000864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000866:	e008      	b.n	800087a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000868:	f7ff fcc8 	bl	80001fc <HAL_GetTick>
 800086c:	4602      	mov	r2, r0
 800086e:	693b      	ldr	r3, [r7, #16]
 8000870:	1ad3      	subs	r3, r2, r3
 8000872:	2b64      	cmp	r3, #100	; 0x64
 8000874:	d901      	bls.n	800087a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000876:	2303      	movs	r3, #3
 8000878:	e1fa      	b.n	8000c70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800087a:	4b5d      	ldr	r3, [pc, #372]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000882:	2b00      	cmp	r3, #0
 8000884:	d0f0      	beq.n	8000868 <HAL_RCC_OscConfig+0xe4>
 8000886:	e014      	b.n	80008b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000888:	f7ff fcb8 	bl	80001fc <HAL_GetTick>
 800088c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800088e:	e008      	b.n	80008a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000890:	f7ff fcb4 	bl	80001fc <HAL_GetTick>
 8000894:	4602      	mov	r2, r0
 8000896:	693b      	ldr	r3, [r7, #16]
 8000898:	1ad3      	subs	r3, r2, r3
 800089a:	2b64      	cmp	r3, #100	; 0x64
 800089c:	d901      	bls.n	80008a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800089e:	2303      	movs	r3, #3
 80008a0:	e1e6      	b.n	8000c70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008a2:	4b53      	ldr	r3, [pc, #332]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d1f0      	bne.n	8000890 <HAL_RCC_OscConfig+0x10c>
 80008ae:	e000      	b.n	80008b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	f003 0302 	and.w	r3, r3, #2
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d063      	beq.n	8000986 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80008be:	4b4c      	ldr	r3, [pc, #304]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 80008c0:	685b      	ldr	r3, [r3, #4]
 80008c2:	f003 030c 	and.w	r3, r3, #12
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d00b      	beq.n	80008e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80008ca:	4b49      	ldr	r3, [pc, #292]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 80008cc:	685b      	ldr	r3, [r3, #4]
 80008ce:	f003 030c 	and.w	r3, r3, #12
 80008d2:	2b08      	cmp	r3, #8
 80008d4:	d11c      	bne.n	8000910 <HAL_RCC_OscConfig+0x18c>
 80008d6:	4b46      	ldr	r3, [pc, #280]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 80008d8:	685b      	ldr	r3, [r3, #4]
 80008da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d116      	bne.n	8000910 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008e2:	4b43      	ldr	r3, [pc, #268]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	f003 0302 	and.w	r3, r3, #2
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d005      	beq.n	80008fa <HAL_RCC_OscConfig+0x176>
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	691b      	ldr	r3, [r3, #16]
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d001      	beq.n	80008fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80008f6:	2301      	movs	r3, #1
 80008f8:	e1ba      	b.n	8000c70 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008fa:	4b3d      	ldr	r3, [pc, #244]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	695b      	ldr	r3, [r3, #20]
 8000906:	00db      	lsls	r3, r3, #3
 8000908:	4939      	ldr	r1, [pc, #228]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 800090a:	4313      	orrs	r3, r2
 800090c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800090e:	e03a      	b.n	8000986 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	691b      	ldr	r3, [r3, #16]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d020      	beq.n	800095a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000918:	4b36      	ldr	r3, [pc, #216]	; (80009f4 <HAL_RCC_OscConfig+0x270>)
 800091a:	2201      	movs	r2, #1
 800091c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800091e:	f7ff fc6d 	bl	80001fc <HAL_GetTick>
 8000922:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000924:	e008      	b.n	8000938 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000926:	f7ff fc69 	bl	80001fc <HAL_GetTick>
 800092a:	4602      	mov	r2, r0
 800092c:	693b      	ldr	r3, [r7, #16]
 800092e:	1ad3      	subs	r3, r2, r3
 8000930:	2b02      	cmp	r3, #2
 8000932:	d901      	bls.n	8000938 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000934:	2303      	movs	r3, #3
 8000936:	e19b      	b.n	8000c70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000938:	4b2d      	ldr	r3, [pc, #180]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f003 0302 	and.w	r3, r3, #2
 8000940:	2b00      	cmp	r3, #0
 8000942:	d0f0      	beq.n	8000926 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000944:	4b2a      	ldr	r3, [pc, #168]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	695b      	ldr	r3, [r3, #20]
 8000950:	00db      	lsls	r3, r3, #3
 8000952:	4927      	ldr	r1, [pc, #156]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 8000954:	4313      	orrs	r3, r2
 8000956:	600b      	str	r3, [r1, #0]
 8000958:	e015      	b.n	8000986 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800095a:	4b26      	ldr	r3, [pc, #152]	; (80009f4 <HAL_RCC_OscConfig+0x270>)
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000960:	f7ff fc4c 	bl	80001fc <HAL_GetTick>
 8000964:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000966:	e008      	b.n	800097a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000968:	f7ff fc48 	bl	80001fc <HAL_GetTick>
 800096c:	4602      	mov	r2, r0
 800096e:	693b      	ldr	r3, [r7, #16]
 8000970:	1ad3      	subs	r3, r2, r3
 8000972:	2b02      	cmp	r3, #2
 8000974:	d901      	bls.n	800097a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000976:	2303      	movs	r3, #3
 8000978:	e17a      	b.n	8000c70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800097a:	4b1d      	ldr	r3, [pc, #116]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	f003 0302 	and.w	r3, r3, #2
 8000982:	2b00      	cmp	r3, #0
 8000984:	d1f0      	bne.n	8000968 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	f003 0308 	and.w	r3, r3, #8
 800098e:	2b00      	cmp	r3, #0
 8000990:	d03a      	beq.n	8000a08 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	699b      	ldr	r3, [r3, #24]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d019      	beq.n	80009ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800099a:	4b17      	ldr	r3, [pc, #92]	; (80009f8 <HAL_RCC_OscConfig+0x274>)
 800099c:	2201      	movs	r2, #1
 800099e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009a0:	f7ff fc2c 	bl	80001fc <HAL_GetTick>
 80009a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009a6:	e008      	b.n	80009ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80009a8:	f7ff fc28 	bl	80001fc <HAL_GetTick>
 80009ac:	4602      	mov	r2, r0
 80009ae:	693b      	ldr	r3, [r7, #16]
 80009b0:	1ad3      	subs	r3, r2, r3
 80009b2:	2b02      	cmp	r3, #2
 80009b4:	d901      	bls.n	80009ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80009b6:	2303      	movs	r3, #3
 80009b8:	e15a      	b.n	8000c70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009ba:	4b0d      	ldr	r3, [pc, #52]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 80009bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009be:	f003 0302 	and.w	r3, r3, #2
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d0f0      	beq.n	80009a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80009c6:	2001      	movs	r0, #1
 80009c8:	f000 faa8 	bl	8000f1c <RCC_Delay>
 80009cc:	e01c      	b.n	8000a08 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80009ce:	4b0a      	ldr	r3, [pc, #40]	; (80009f8 <HAL_RCC_OscConfig+0x274>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009d4:	f7ff fc12 	bl	80001fc <HAL_GetTick>
 80009d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009da:	e00f      	b.n	80009fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80009dc:	f7ff fc0e 	bl	80001fc <HAL_GetTick>
 80009e0:	4602      	mov	r2, r0
 80009e2:	693b      	ldr	r3, [r7, #16]
 80009e4:	1ad3      	subs	r3, r2, r3
 80009e6:	2b02      	cmp	r3, #2
 80009e8:	d908      	bls.n	80009fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80009ea:	2303      	movs	r3, #3
 80009ec:	e140      	b.n	8000c70 <HAL_RCC_OscConfig+0x4ec>
 80009ee:	bf00      	nop
 80009f0:	40021000 	.word	0x40021000
 80009f4:	42420000 	.word	0x42420000
 80009f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009fc:	4b9e      	ldr	r3, [pc, #632]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 80009fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a00:	f003 0302 	and.w	r3, r3, #2
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d1e9      	bne.n	80009dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f003 0304 	and.w	r3, r3, #4
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	f000 80a6 	beq.w	8000b62 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000a16:	2300      	movs	r3, #0
 8000a18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a1a:	4b97      	ldr	r3, [pc, #604]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000a1c:	69db      	ldr	r3, [r3, #28]
 8000a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d10d      	bne.n	8000a42 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a26:	4b94      	ldr	r3, [pc, #592]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000a28:	69db      	ldr	r3, [r3, #28]
 8000a2a:	4a93      	ldr	r2, [pc, #588]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000a2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a30:	61d3      	str	r3, [r2, #28]
 8000a32:	4b91      	ldr	r3, [pc, #580]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000a34:	69db      	ldr	r3, [r3, #28]
 8000a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a3a:	60bb      	str	r3, [r7, #8]
 8000a3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a42:	4b8e      	ldr	r3, [pc, #568]	; (8000c7c <HAL_RCC_OscConfig+0x4f8>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d118      	bne.n	8000a80 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a4e:	4b8b      	ldr	r3, [pc, #556]	; (8000c7c <HAL_RCC_OscConfig+0x4f8>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a8a      	ldr	r2, [pc, #552]	; (8000c7c <HAL_RCC_OscConfig+0x4f8>)
 8000a54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000a5a:	f7ff fbcf 	bl	80001fc <HAL_GetTick>
 8000a5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a60:	e008      	b.n	8000a74 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a62:	f7ff fbcb 	bl	80001fc <HAL_GetTick>
 8000a66:	4602      	mov	r2, r0
 8000a68:	693b      	ldr	r3, [r7, #16]
 8000a6a:	1ad3      	subs	r3, r2, r3
 8000a6c:	2b64      	cmp	r3, #100	; 0x64
 8000a6e:	d901      	bls.n	8000a74 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000a70:	2303      	movs	r3, #3
 8000a72:	e0fd      	b.n	8000c70 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a74:	4b81      	ldr	r3, [pc, #516]	; (8000c7c <HAL_RCC_OscConfig+0x4f8>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d0f0      	beq.n	8000a62 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	68db      	ldr	r3, [r3, #12]
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d106      	bne.n	8000a96 <HAL_RCC_OscConfig+0x312>
 8000a88:	4b7b      	ldr	r3, [pc, #492]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000a8a:	6a1b      	ldr	r3, [r3, #32]
 8000a8c:	4a7a      	ldr	r2, [pc, #488]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000a8e:	f043 0301 	orr.w	r3, r3, #1
 8000a92:	6213      	str	r3, [r2, #32]
 8000a94:	e02d      	b.n	8000af2 <HAL_RCC_OscConfig+0x36e>
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	68db      	ldr	r3, [r3, #12]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d10c      	bne.n	8000ab8 <HAL_RCC_OscConfig+0x334>
 8000a9e:	4b76      	ldr	r3, [pc, #472]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000aa0:	6a1b      	ldr	r3, [r3, #32]
 8000aa2:	4a75      	ldr	r2, [pc, #468]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000aa4:	f023 0301 	bic.w	r3, r3, #1
 8000aa8:	6213      	str	r3, [r2, #32]
 8000aaa:	4b73      	ldr	r3, [pc, #460]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000aac:	6a1b      	ldr	r3, [r3, #32]
 8000aae:	4a72      	ldr	r2, [pc, #456]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000ab0:	f023 0304 	bic.w	r3, r3, #4
 8000ab4:	6213      	str	r3, [r2, #32]
 8000ab6:	e01c      	b.n	8000af2 <HAL_RCC_OscConfig+0x36e>
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	68db      	ldr	r3, [r3, #12]
 8000abc:	2b05      	cmp	r3, #5
 8000abe:	d10c      	bne.n	8000ada <HAL_RCC_OscConfig+0x356>
 8000ac0:	4b6d      	ldr	r3, [pc, #436]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000ac2:	6a1b      	ldr	r3, [r3, #32]
 8000ac4:	4a6c      	ldr	r2, [pc, #432]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000ac6:	f043 0304 	orr.w	r3, r3, #4
 8000aca:	6213      	str	r3, [r2, #32]
 8000acc:	4b6a      	ldr	r3, [pc, #424]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000ace:	6a1b      	ldr	r3, [r3, #32]
 8000ad0:	4a69      	ldr	r2, [pc, #420]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000ad2:	f043 0301 	orr.w	r3, r3, #1
 8000ad6:	6213      	str	r3, [r2, #32]
 8000ad8:	e00b      	b.n	8000af2 <HAL_RCC_OscConfig+0x36e>
 8000ada:	4b67      	ldr	r3, [pc, #412]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000adc:	6a1b      	ldr	r3, [r3, #32]
 8000ade:	4a66      	ldr	r2, [pc, #408]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000ae0:	f023 0301 	bic.w	r3, r3, #1
 8000ae4:	6213      	str	r3, [r2, #32]
 8000ae6:	4b64      	ldr	r3, [pc, #400]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000ae8:	6a1b      	ldr	r3, [r3, #32]
 8000aea:	4a63      	ldr	r2, [pc, #396]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000aec:	f023 0304 	bic.w	r3, r3, #4
 8000af0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	68db      	ldr	r3, [r3, #12]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d015      	beq.n	8000b26 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000afa:	f7ff fb7f 	bl	80001fc <HAL_GetTick>
 8000afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b00:	e00a      	b.n	8000b18 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b02:	f7ff fb7b 	bl	80001fc <HAL_GetTick>
 8000b06:	4602      	mov	r2, r0
 8000b08:	693b      	ldr	r3, [r7, #16]
 8000b0a:	1ad3      	subs	r3, r2, r3
 8000b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d901      	bls.n	8000b18 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000b14:	2303      	movs	r3, #3
 8000b16:	e0ab      	b.n	8000c70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b18:	4b57      	ldr	r3, [pc, #348]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000b1a:	6a1b      	ldr	r3, [r3, #32]
 8000b1c:	f003 0302 	and.w	r3, r3, #2
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d0ee      	beq.n	8000b02 <HAL_RCC_OscConfig+0x37e>
 8000b24:	e014      	b.n	8000b50 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b26:	f7ff fb69 	bl	80001fc <HAL_GetTick>
 8000b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b2c:	e00a      	b.n	8000b44 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b2e:	f7ff fb65 	bl	80001fc <HAL_GetTick>
 8000b32:	4602      	mov	r2, r0
 8000b34:	693b      	ldr	r3, [r7, #16]
 8000b36:	1ad3      	subs	r3, r2, r3
 8000b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d901      	bls.n	8000b44 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000b40:	2303      	movs	r3, #3
 8000b42:	e095      	b.n	8000c70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b44:	4b4c      	ldr	r3, [pc, #304]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000b46:	6a1b      	ldr	r3, [r3, #32]
 8000b48:	f003 0302 	and.w	r3, r3, #2
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d1ee      	bne.n	8000b2e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000b50:	7dfb      	ldrb	r3, [r7, #23]
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d105      	bne.n	8000b62 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b56:	4b48      	ldr	r3, [pc, #288]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000b58:	69db      	ldr	r3, [r3, #28]
 8000b5a:	4a47      	ldr	r2, [pc, #284]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000b5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b60:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	69db      	ldr	r3, [r3, #28]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	f000 8081 	beq.w	8000c6e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b6c:	4b42      	ldr	r3, [pc, #264]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	f003 030c 	and.w	r3, r3, #12
 8000b74:	2b08      	cmp	r3, #8
 8000b76:	d061      	beq.n	8000c3c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	69db      	ldr	r3, [r3, #28]
 8000b7c:	2b02      	cmp	r3, #2
 8000b7e:	d146      	bne.n	8000c0e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000b80:	4b3f      	ldr	r3, [pc, #252]	; (8000c80 <HAL_RCC_OscConfig+0x4fc>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b86:	f7ff fb39 	bl	80001fc <HAL_GetTick>
 8000b8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b8c:	e008      	b.n	8000ba0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000b8e:	f7ff fb35 	bl	80001fc <HAL_GetTick>
 8000b92:	4602      	mov	r2, r0
 8000b94:	693b      	ldr	r3, [r7, #16]
 8000b96:	1ad3      	subs	r3, r2, r3
 8000b98:	2b02      	cmp	r3, #2
 8000b9a:	d901      	bls.n	8000ba0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	e067      	b.n	8000c70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ba0:	4b35      	ldr	r3, [pc, #212]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d1f0      	bne.n	8000b8e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6a1b      	ldr	r3, [r3, #32]
 8000bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bb4:	d108      	bne.n	8000bc8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000bb6:	4b30      	ldr	r3, [pc, #192]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	689b      	ldr	r3, [r3, #8]
 8000bc2:	492d      	ldr	r1, [pc, #180]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000bc8:	4b2b      	ldr	r3, [pc, #172]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6a19      	ldr	r1, [r3, #32]
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bd8:	430b      	orrs	r3, r1
 8000bda:	4927      	ldr	r1, [pc, #156]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000be0:	4b27      	ldr	r3, [pc, #156]	; (8000c80 <HAL_RCC_OscConfig+0x4fc>)
 8000be2:	2201      	movs	r2, #1
 8000be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000be6:	f7ff fb09 	bl	80001fc <HAL_GetTick>
 8000bea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000bec:	e008      	b.n	8000c00 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000bee:	f7ff fb05 	bl	80001fc <HAL_GetTick>
 8000bf2:	4602      	mov	r2, r0
 8000bf4:	693b      	ldr	r3, [r7, #16]
 8000bf6:	1ad3      	subs	r3, r2, r3
 8000bf8:	2b02      	cmp	r3, #2
 8000bfa:	d901      	bls.n	8000c00 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	e037      	b.n	8000c70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c00:	4b1d      	ldr	r3, [pc, #116]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d0f0      	beq.n	8000bee <HAL_RCC_OscConfig+0x46a>
 8000c0c:	e02f      	b.n	8000c6e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c0e:	4b1c      	ldr	r3, [pc, #112]	; (8000c80 <HAL_RCC_OscConfig+0x4fc>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c14:	f7ff faf2 	bl	80001fc <HAL_GetTick>
 8000c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c1a:	e008      	b.n	8000c2e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c1c:	f7ff faee 	bl	80001fc <HAL_GetTick>
 8000c20:	4602      	mov	r2, r0
 8000c22:	693b      	ldr	r3, [r7, #16]
 8000c24:	1ad3      	subs	r3, r2, r3
 8000c26:	2b02      	cmp	r3, #2
 8000c28:	d901      	bls.n	8000c2e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	e020      	b.n	8000c70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c2e:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d1f0      	bne.n	8000c1c <HAL_RCC_OscConfig+0x498>
 8000c3a:	e018      	b.n	8000c6e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	69db      	ldr	r3, [r3, #28]
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d101      	bne.n	8000c48 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000c44:	2301      	movs	r3, #1
 8000c46:	e013      	b.n	8000c70 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000c48:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6a1b      	ldr	r3, [r3, #32]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d106      	bne.n	8000c6a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c66:	429a      	cmp	r2, r3
 8000c68:	d001      	beq.n	8000c6e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	e000      	b.n	8000c70 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000c6e:	2300      	movs	r3, #0
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3718      	adds	r7, #24
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40021000 	.word	0x40021000
 8000c7c:	40007000 	.word	0x40007000
 8000c80:	42420060 	.word	0x42420060

08000c84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d101      	bne.n	8000c98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000c94:	2301      	movs	r3, #1
 8000c96:	e0d0      	b.n	8000e3a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000c98:	4b6a      	ldr	r3, [pc, #424]	; (8000e44 <HAL_RCC_ClockConfig+0x1c0>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f003 0307 	and.w	r3, r3, #7
 8000ca0:	683a      	ldr	r2, [r7, #0]
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	d910      	bls.n	8000cc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ca6:	4b67      	ldr	r3, [pc, #412]	; (8000e44 <HAL_RCC_ClockConfig+0x1c0>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f023 0207 	bic.w	r2, r3, #7
 8000cae:	4965      	ldr	r1, [pc, #404]	; (8000e44 <HAL_RCC_ClockConfig+0x1c0>)
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000cb6:	4b63      	ldr	r3, [pc, #396]	; (8000e44 <HAL_RCC_ClockConfig+0x1c0>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f003 0307 	and.w	r3, r3, #7
 8000cbe:	683a      	ldr	r2, [r7, #0]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d001      	beq.n	8000cc8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	e0b8      	b.n	8000e3a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f003 0302 	and.w	r3, r3, #2
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d020      	beq.n	8000d16 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f003 0304 	and.w	r3, r3, #4
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d005      	beq.n	8000cec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000ce0:	4b59      	ldr	r3, [pc, #356]	; (8000e48 <HAL_RCC_ClockConfig+0x1c4>)
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	4a58      	ldr	r2, [pc, #352]	; (8000e48 <HAL_RCC_ClockConfig+0x1c4>)
 8000ce6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000cea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f003 0308 	and.w	r3, r3, #8
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d005      	beq.n	8000d04 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000cf8:	4b53      	ldr	r3, [pc, #332]	; (8000e48 <HAL_RCC_ClockConfig+0x1c4>)
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	4a52      	ldr	r2, [pc, #328]	; (8000e48 <HAL_RCC_ClockConfig+0x1c4>)
 8000cfe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000d02:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d04:	4b50      	ldr	r3, [pc, #320]	; (8000e48 <HAL_RCC_ClockConfig+0x1c4>)
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	689b      	ldr	r3, [r3, #8]
 8000d10:	494d      	ldr	r1, [pc, #308]	; (8000e48 <HAL_RCC_ClockConfig+0x1c4>)
 8000d12:	4313      	orrs	r3, r2
 8000d14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d040      	beq.n	8000da4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d107      	bne.n	8000d3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d2a:	4b47      	ldr	r3, [pc, #284]	; (8000e48 <HAL_RCC_ClockConfig+0x1c4>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d115      	bne.n	8000d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
 8000d38:	e07f      	b.n	8000e3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	2b02      	cmp	r3, #2
 8000d40:	d107      	bne.n	8000d52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d42:	4b41      	ldr	r3, [pc, #260]	; (8000e48 <HAL_RCC_ClockConfig+0x1c4>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d109      	bne.n	8000d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e073      	b.n	8000e3a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d52:	4b3d      	ldr	r3, [pc, #244]	; (8000e48 <HAL_RCC_ClockConfig+0x1c4>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f003 0302 	and.w	r3, r3, #2
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d101      	bne.n	8000d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e06b      	b.n	8000e3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d62:	4b39      	ldr	r3, [pc, #228]	; (8000e48 <HAL_RCC_ClockConfig+0x1c4>)
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	f023 0203 	bic.w	r2, r3, #3
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	4936      	ldr	r1, [pc, #216]	; (8000e48 <HAL_RCC_ClockConfig+0x1c4>)
 8000d70:	4313      	orrs	r3, r2
 8000d72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000d74:	f7ff fa42 	bl	80001fc <HAL_GetTick>
 8000d78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d7a:	e00a      	b.n	8000d92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d7c:	f7ff fa3e 	bl	80001fc <HAL_GetTick>
 8000d80:	4602      	mov	r2, r0
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d901      	bls.n	8000d92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	e053      	b.n	8000e3a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d92:	4b2d      	ldr	r3, [pc, #180]	; (8000e48 <HAL_RCC_ClockConfig+0x1c4>)
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f003 020c 	and.w	r2, r3, #12
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d1eb      	bne.n	8000d7c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000da4:	4b27      	ldr	r3, [pc, #156]	; (8000e44 <HAL_RCC_ClockConfig+0x1c0>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f003 0307 	and.w	r3, r3, #7
 8000dac:	683a      	ldr	r2, [r7, #0]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d210      	bcs.n	8000dd4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000db2:	4b24      	ldr	r3, [pc, #144]	; (8000e44 <HAL_RCC_ClockConfig+0x1c0>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f023 0207 	bic.w	r2, r3, #7
 8000dba:	4922      	ldr	r1, [pc, #136]	; (8000e44 <HAL_RCC_ClockConfig+0x1c0>)
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000dc2:	4b20      	ldr	r3, [pc, #128]	; (8000e44 <HAL_RCC_ClockConfig+0x1c0>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f003 0307 	and.w	r3, r3, #7
 8000dca:	683a      	ldr	r2, [r7, #0]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d001      	beq.n	8000dd4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	e032      	b.n	8000e3a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f003 0304 	and.w	r3, r3, #4
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d008      	beq.n	8000df2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000de0:	4b19      	ldr	r3, [pc, #100]	; (8000e48 <HAL_RCC_ClockConfig+0x1c4>)
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	4916      	ldr	r1, [pc, #88]	; (8000e48 <HAL_RCC_ClockConfig+0x1c4>)
 8000dee:	4313      	orrs	r3, r2
 8000df0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f003 0308 	and.w	r3, r3, #8
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d009      	beq.n	8000e12 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000dfe:	4b12      	ldr	r3, [pc, #72]	; (8000e48 <HAL_RCC_ClockConfig+0x1c4>)
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	691b      	ldr	r3, [r3, #16]
 8000e0a:	00db      	lsls	r3, r3, #3
 8000e0c:	490e      	ldr	r1, [pc, #56]	; (8000e48 <HAL_RCC_ClockConfig+0x1c4>)
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000e12:	f000 f821 	bl	8000e58 <HAL_RCC_GetSysClockFreq>
 8000e16:	4601      	mov	r1, r0
 8000e18:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <HAL_RCC_ClockConfig+0x1c4>)
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	091b      	lsrs	r3, r3, #4
 8000e1e:	f003 030f 	and.w	r3, r3, #15
 8000e22:	4a0a      	ldr	r2, [pc, #40]	; (8000e4c <HAL_RCC_ClockConfig+0x1c8>)
 8000e24:	5cd3      	ldrb	r3, [r2, r3]
 8000e26:	fa21 f303 	lsr.w	r3, r1, r3
 8000e2a:	4a09      	ldr	r2, [pc, #36]	; (8000e50 <HAL_RCC_ClockConfig+0x1cc>)
 8000e2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000e2e:	4b09      	ldr	r3, [pc, #36]	; (8000e54 <HAL_RCC_ClockConfig+0x1d0>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff f9a0 	bl	8000178 <HAL_InitTick>

  return HAL_OK;
 8000e38:	2300      	movs	r3, #0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3710      	adds	r7, #16
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40022000 	.word	0x40022000
 8000e48:	40021000 	.word	0x40021000
 8000e4c:	080030c4 	.word	0x080030c4
 8000e50:	20000010 	.word	0x20000010
 8000e54:	20000000 	.word	0x20000000

08000e58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000e58:	b490      	push	{r4, r7}
 8000e5a:	b08a      	sub	sp, #40	; 0x28
 8000e5c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000e5e:	4b2a      	ldr	r3, [pc, #168]	; (8000f08 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000e60:	1d3c      	adds	r4, r7, #4
 8000e62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000e68:	4b28      	ldr	r3, [pc, #160]	; (8000f0c <HAL_RCC_GetSysClockFreq+0xb4>)
 8000e6a:	881b      	ldrh	r3, [r3, #0]
 8000e6c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61fb      	str	r3, [r7, #28]
 8000e72:	2300      	movs	r3, #0
 8000e74:	61bb      	str	r3, [r7, #24]
 8000e76:	2300      	movs	r3, #0
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000e82:	4b23      	ldr	r3, [pc, #140]	; (8000f10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	f003 030c 	and.w	r3, r3, #12
 8000e8e:	2b04      	cmp	r3, #4
 8000e90:	d002      	beq.n	8000e98 <HAL_RCC_GetSysClockFreq+0x40>
 8000e92:	2b08      	cmp	r3, #8
 8000e94:	d003      	beq.n	8000e9e <HAL_RCC_GetSysClockFreq+0x46>
 8000e96:	e02d      	b.n	8000ef4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000e98:	4b1e      	ldr	r3, [pc, #120]	; (8000f14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000e9a:	623b      	str	r3, [r7, #32]
      break;
 8000e9c:	e02d      	b.n	8000efa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	0c9b      	lsrs	r3, r3, #18
 8000ea2:	f003 030f 	and.w	r3, r3, #15
 8000ea6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000eaa:	4413      	add	r3, r2
 8000eac:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000eb0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d013      	beq.n	8000ee4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000ebc:	4b14      	ldr	r3, [pc, #80]	; (8000f10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	0c5b      	lsrs	r3, r3, #17
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000eca:	4413      	add	r3, r2
 8000ecc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000ed0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	4a0f      	ldr	r2, [pc, #60]	; (8000f14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000ed6:	fb02 f203 	mul.w	r2, r2, r3
 8000eda:	69bb      	ldr	r3, [r7, #24]
 8000edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ee2:	e004      	b.n	8000eee <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	4a0c      	ldr	r2, [pc, #48]	; (8000f18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000ee8:	fb02 f303 	mul.w	r3, r2, r3
 8000eec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8000eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef0:	623b      	str	r3, [r7, #32]
      break;
 8000ef2:	e002      	b.n	8000efa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000ef4:	4b07      	ldr	r3, [pc, #28]	; (8000f14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000ef6:	623b      	str	r3, [r7, #32]
      break;
 8000ef8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000efa:	6a3b      	ldr	r3, [r7, #32]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3728      	adds	r7, #40	; 0x28
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bc90      	pop	{r4, r7}
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	08002f90 	.word	0x08002f90
 8000f0c:	08002fa0 	.word	0x08002fa0
 8000f10:	40021000 	.word	0x40021000
 8000f14:	007a1200 	.word	0x007a1200
 8000f18:	003d0900 	.word	0x003d0900

08000f1c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000f24:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <RCC_Delay+0x34>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a0a      	ldr	r2, [pc, #40]	; (8000f54 <RCC_Delay+0x38>)
 8000f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f2e:	0a5b      	lsrs	r3, r3, #9
 8000f30:	687a      	ldr	r2, [r7, #4]
 8000f32:	fb02 f303 	mul.w	r3, r2, r3
 8000f36:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8000f38:	bf00      	nop
  }
  while (Delay --);
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	1e5a      	subs	r2, r3, #1
 8000f3e:	60fa      	str	r2, [r7, #12]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d1f9      	bne.n	8000f38 <RCC_Delay+0x1c>
}
 8000f44:	bf00      	nop
 8000f46:	3714      	adds	r7, #20
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bc80      	pop	{r7}
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	20000010 	.word	0x20000010
 8000f54:	10624dd3 	.word	0x10624dd3

08000f58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d101      	bne.n	8000f6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e01d      	b.n	8000fa6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d106      	bne.n	8000f84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f001 fad6 	bl	8002530 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2202      	movs	r2, #2
 8000f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	3304      	adds	r3, #4
 8000f94:	4619      	mov	r1, r3
 8000f96:	4610      	mov	r0, r2
 8000f98:	f000 fa18 	bl	80013cc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	b085      	sub	sp, #20
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	68da      	ldr	r2, [r3, #12]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f042 0201 	orr.w	r2, r2, #1
 8000fc4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	f003 0307 	and.w	r3, r3, #7
 8000fd0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	2b06      	cmp	r3, #6
 8000fd6:	d007      	beq.n	8000fe8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f042 0201 	orr.w	r2, r2, #1
 8000fe6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000fe8:	2300      	movs	r3, #0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3714      	adds	r7, #20
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr

08000ff4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	691b      	ldr	r3, [r3, #16]
 8001002:	f003 0302 	and.w	r3, r3, #2
 8001006:	2b02      	cmp	r3, #2
 8001008:	d122      	bne.n	8001050 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	f003 0302 	and.w	r3, r3, #2
 8001014:	2b02      	cmp	r3, #2
 8001016:	d11b      	bne.n	8001050 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f06f 0202 	mvn.w	r2, #2
 8001020:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2201      	movs	r2, #1
 8001026:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	699b      	ldr	r3, [r3, #24]
 800102e:	f003 0303 	and.w	r3, r3, #3
 8001032:	2b00      	cmp	r3, #0
 8001034:	d003      	beq.n	800103e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f000 f9ad 	bl	8001396 <HAL_TIM_IC_CaptureCallback>
 800103c:	e005      	b.n	800104a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f000 f9a0 	bl	8001384 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f000 f9af 	bl	80013a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2200      	movs	r2, #0
 800104e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	691b      	ldr	r3, [r3, #16]
 8001056:	f003 0304 	and.w	r3, r3, #4
 800105a:	2b04      	cmp	r3, #4
 800105c:	d122      	bne.n	80010a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	f003 0304 	and.w	r3, r3, #4
 8001068:	2b04      	cmp	r3, #4
 800106a:	d11b      	bne.n	80010a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f06f 0204 	mvn.w	r2, #4
 8001074:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2202      	movs	r2, #2
 800107a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	699b      	ldr	r3, [r3, #24]
 8001082:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001086:	2b00      	cmp	r3, #0
 8001088:	d003      	beq.n	8001092 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f000 f983 	bl	8001396 <HAL_TIM_IC_CaptureCallback>
 8001090:	e005      	b.n	800109e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f000 f976 	bl	8001384 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f000 f985 	bl	80013a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2200      	movs	r2, #0
 80010a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	691b      	ldr	r3, [r3, #16]
 80010aa:	f003 0308 	and.w	r3, r3, #8
 80010ae:	2b08      	cmp	r3, #8
 80010b0:	d122      	bne.n	80010f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	f003 0308 	and.w	r3, r3, #8
 80010bc:	2b08      	cmp	r3, #8
 80010be:	d11b      	bne.n	80010f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f06f 0208 	mvn.w	r2, #8
 80010c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2204      	movs	r2, #4
 80010ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	69db      	ldr	r3, [r3, #28]
 80010d6:	f003 0303 	and.w	r3, r3, #3
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d003      	beq.n	80010e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f000 f959 	bl	8001396 <HAL_TIM_IC_CaptureCallback>
 80010e4:	e005      	b.n	80010f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f000 f94c 	bl	8001384 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f000 f95b 	bl	80013a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2200      	movs	r2, #0
 80010f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	691b      	ldr	r3, [r3, #16]
 80010fe:	f003 0310 	and.w	r3, r3, #16
 8001102:	2b10      	cmp	r3, #16
 8001104:	d122      	bne.n	800114c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	f003 0310 	and.w	r3, r3, #16
 8001110:	2b10      	cmp	r3, #16
 8001112:	d11b      	bne.n	800114c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f06f 0210 	mvn.w	r2, #16
 800111c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2208      	movs	r2, #8
 8001122:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	69db      	ldr	r3, [r3, #28]
 800112a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800112e:	2b00      	cmp	r3, #0
 8001130:	d003      	beq.n	800113a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f000 f92f 	bl	8001396 <HAL_TIM_IC_CaptureCallback>
 8001138:	e005      	b.n	8001146 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f000 f922 	bl	8001384 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f000 f931 	bl	80013a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2200      	movs	r2, #0
 800114a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	691b      	ldr	r3, [r3, #16]
 8001152:	f003 0301 	and.w	r3, r3, #1
 8001156:	2b01      	cmp	r3, #1
 8001158:	d10e      	bne.n	8001178 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	f003 0301 	and.w	r3, r3, #1
 8001164:	2b01      	cmp	r3, #1
 8001166:	d107      	bne.n	8001178 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f06f 0201 	mvn.w	r2, #1
 8001170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f000 f8fd 	bl	8001372 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	691b      	ldr	r3, [r3, #16]
 800117e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001182:	2b80      	cmp	r3, #128	; 0x80
 8001184:	d10e      	bne.n	80011a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001190:	2b80      	cmp	r3, #128	; 0x80
 8001192:	d107      	bne.n	80011a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800119c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f000 fa59 	bl	8001656 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	691b      	ldr	r3, [r3, #16]
 80011aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011ae:	2b40      	cmp	r3, #64	; 0x40
 80011b0:	d10e      	bne.n	80011d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011bc:	2b40      	cmp	r3, #64	; 0x40
 80011be:	d107      	bne.n	80011d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80011c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f000 f8f5 	bl	80013ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	691b      	ldr	r3, [r3, #16]
 80011d6:	f003 0320 	and.w	r3, r3, #32
 80011da:	2b20      	cmp	r3, #32
 80011dc:	d10e      	bne.n	80011fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	f003 0320 	and.w	r3, r3, #32
 80011e8:	2b20      	cmp	r3, #32
 80011ea:	d107      	bne.n	80011fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f06f 0220 	mvn.w	r2, #32
 80011f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f000 fa24 	bl	8001644 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001214:	2b01      	cmp	r3, #1
 8001216:	d101      	bne.n	800121c <HAL_TIM_ConfigClockSource+0x18>
 8001218:	2302      	movs	r3, #2
 800121a:	e0a6      	b.n	800136a <HAL_TIM_ConfigClockSource+0x166>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2201      	movs	r2, #1
 8001220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2202      	movs	r2, #2
 8001228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800123a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001242:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	68fa      	ldr	r2, [r7, #12]
 800124a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2b40      	cmp	r3, #64	; 0x40
 8001252:	d067      	beq.n	8001324 <HAL_TIM_ConfigClockSource+0x120>
 8001254:	2b40      	cmp	r3, #64	; 0x40
 8001256:	d80b      	bhi.n	8001270 <HAL_TIM_ConfigClockSource+0x6c>
 8001258:	2b10      	cmp	r3, #16
 800125a:	d073      	beq.n	8001344 <HAL_TIM_ConfigClockSource+0x140>
 800125c:	2b10      	cmp	r3, #16
 800125e:	d802      	bhi.n	8001266 <HAL_TIM_ConfigClockSource+0x62>
 8001260:	2b00      	cmp	r3, #0
 8001262:	d06f      	beq.n	8001344 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8001264:	e078      	b.n	8001358 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001266:	2b20      	cmp	r3, #32
 8001268:	d06c      	beq.n	8001344 <HAL_TIM_ConfigClockSource+0x140>
 800126a:	2b30      	cmp	r3, #48	; 0x30
 800126c:	d06a      	beq.n	8001344 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800126e:	e073      	b.n	8001358 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001270:	2b70      	cmp	r3, #112	; 0x70
 8001272:	d00d      	beq.n	8001290 <HAL_TIM_ConfigClockSource+0x8c>
 8001274:	2b70      	cmp	r3, #112	; 0x70
 8001276:	d804      	bhi.n	8001282 <HAL_TIM_ConfigClockSource+0x7e>
 8001278:	2b50      	cmp	r3, #80	; 0x50
 800127a:	d033      	beq.n	80012e4 <HAL_TIM_ConfigClockSource+0xe0>
 800127c:	2b60      	cmp	r3, #96	; 0x60
 800127e:	d041      	beq.n	8001304 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8001280:	e06a      	b.n	8001358 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001282:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001286:	d066      	beq.n	8001356 <HAL_TIM_ConfigClockSource+0x152>
 8001288:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800128c:	d017      	beq.n	80012be <HAL_TIM_ConfigClockSource+0xba>
      break;
 800128e:	e063      	b.n	8001358 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6818      	ldr	r0, [r3, #0]
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	6899      	ldr	r1, [r3, #8]
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685a      	ldr	r2, [r3, #4]
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	f000 f96d 	bl	800157e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80012b2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	68fa      	ldr	r2, [r7, #12]
 80012ba:	609a      	str	r2, [r3, #8]
      break;
 80012bc:	e04c      	b.n	8001358 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6818      	ldr	r0, [r3, #0]
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	6899      	ldr	r1, [r3, #8]
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685a      	ldr	r2, [r3, #4]
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	68db      	ldr	r3, [r3, #12]
 80012ce:	f000 f956 	bl	800157e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	689a      	ldr	r2, [r3, #8]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80012e0:	609a      	str	r2, [r3, #8]
      break;
 80012e2:	e039      	b.n	8001358 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6818      	ldr	r0, [r3, #0]
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	6859      	ldr	r1, [r3, #4]
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	461a      	mov	r2, r3
 80012f2:	f000 f8cd 	bl	8001490 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	2150      	movs	r1, #80	; 0x50
 80012fc:	4618      	mov	r0, r3
 80012fe:	f000 f924 	bl	800154a <TIM_ITRx_SetConfig>
      break;
 8001302:	e029      	b.n	8001358 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6818      	ldr	r0, [r3, #0]
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	6859      	ldr	r1, [r3, #4]
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	461a      	mov	r2, r3
 8001312:	f000 f8eb 	bl	80014ec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2160      	movs	r1, #96	; 0x60
 800131c:	4618      	mov	r0, r3
 800131e:	f000 f914 	bl	800154a <TIM_ITRx_SetConfig>
      break;
 8001322:	e019      	b.n	8001358 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6818      	ldr	r0, [r3, #0]
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	6859      	ldr	r1, [r3, #4]
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	461a      	mov	r2, r3
 8001332:	f000 f8ad 	bl	8001490 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2140      	movs	r1, #64	; 0x40
 800133c:	4618      	mov	r0, r3
 800133e:	f000 f904 	bl	800154a <TIM_ITRx_SetConfig>
      break;
 8001342:	e009      	b.n	8001358 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4619      	mov	r1, r3
 800134e:	4610      	mov	r0, r2
 8001350:	f000 f8fb 	bl	800154a <TIM_ITRx_SetConfig>
      break;
 8001354:	e000      	b.n	8001358 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8001356:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2201      	movs	r2, #1
 800135c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2200      	movs	r2, #0
 8001364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001372:	b480      	push	{r7}
 8001374:	b083      	sub	sp, #12
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr

08001384 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	bc80      	pop	{r7}
 8001394:	4770      	bx	lr

08001396 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001396:	b480      	push	{r7}
 8001398:	b083      	sub	sp, #12
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800139e:	bf00      	nop
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr

080013a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80013b0:	bf00      	nop
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bc80      	pop	{r7}
 80013b8:	4770      	bx	lr

080013ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80013ba:	b480      	push	{r7}
 80013bc:	b083      	sub	sp, #12
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr

080013cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4a29      	ldr	r2, [pc, #164]	; (8001484 <TIM_Base_SetConfig+0xb8>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d00b      	beq.n	80013fc <TIM_Base_SetConfig+0x30>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013ea:	d007      	beq.n	80013fc <TIM_Base_SetConfig+0x30>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4a26      	ldr	r2, [pc, #152]	; (8001488 <TIM_Base_SetConfig+0xbc>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d003      	beq.n	80013fc <TIM_Base_SetConfig+0x30>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	4a25      	ldr	r2, [pc, #148]	; (800148c <TIM_Base_SetConfig+0xc0>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d108      	bne.n	800140e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001402:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	68fa      	ldr	r2, [r7, #12]
 800140a:	4313      	orrs	r3, r2
 800140c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a1c      	ldr	r2, [pc, #112]	; (8001484 <TIM_Base_SetConfig+0xb8>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d00b      	beq.n	800142e <TIM_Base_SetConfig+0x62>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800141c:	d007      	beq.n	800142e <TIM_Base_SetConfig+0x62>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a19      	ldr	r2, [pc, #100]	; (8001488 <TIM_Base_SetConfig+0xbc>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d003      	beq.n	800142e <TIM_Base_SetConfig+0x62>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a18      	ldr	r2, [pc, #96]	; (800148c <TIM_Base_SetConfig+0xc0>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d108      	bne.n	8001440 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001434:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	68fa      	ldr	r2, [r7, #12]
 800143c:	4313      	orrs	r3, r2
 800143e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	695b      	ldr	r3, [r3, #20]
 800144a:	4313      	orrs	r3, r2
 800144c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	68fa      	ldr	r2, [r7, #12]
 8001452:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	689a      	ldr	r2, [r3, #8]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4a07      	ldr	r2, [pc, #28]	; (8001484 <TIM_Base_SetConfig+0xb8>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d103      	bne.n	8001474 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	691a      	ldr	r2, [r3, #16]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2201      	movs	r2, #1
 8001478:	615a      	str	r2, [r3, #20]
}
 800147a:	bf00      	nop
 800147c:	3714      	adds	r7, #20
 800147e:	46bd      	mov	sp, r7
 8001480:	bc80      	pop	{r7}
 8001482:	4770      	bx	lr
 8001484:	40012c00 	.word	0x40012c00
 8001488:	40000400 	.word	0x40000400
 800148c:	40000800 	.word	0x40000800

08001490 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001490:	b480      	push	{r7}
 8001492:	b087      	sub	sp, #28
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	6a1b      	ldr	r3, [r3, #32]
 80014a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	6a1b      	ldr	r3, [r3, #32]
 80014a6:	f023 0201 	bic.w	r2, r3, #1
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	699b      	ldr	r3, [r3, #24]
 80014b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80014ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	011b      	lsls	r3, r3, #4
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	f023 030a 	bic.w	r3, r3, #10
 80014cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80014ce:	697a      	ldr	r2, [r7, #20]
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	697a      	ldr	r2, [r7, #20]
 80014e0:	621a      	str	r2, [r3, #32]
}
 80014e2:	bf00      	nop
 80014e4:	371c      	adds	r7, #28
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr

080014ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b087      	sub	sp, #28
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	6a1b      	ldr	r3, [r3, #32]
 80014fc:	f023 0210 	bic.w	r2, r3, #16
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	6a1b      	ldr	r3, [r3, #32]
 800150e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001516:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	031b      	lsls	r3, r3, #12
 800151c:	697a      	ldr	r2, [r7, #20]
 800151e:	4313      	orrs	r3, r2
 8001520:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001528:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	011b      	lsls	r3, r3, #4
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	4313      	orrs	r3, r2
 8001532:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	697a      	ldr	r2, [r7, #20]
 8001538:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	621a      	str	r2, [r3, #32]
}
 8001540:	bf00      	nop
 8001542:	371c      	adds	r7, #28
 8001544:	46bd      	mov	sp, r7
 8001546:	bc80      	pop	{r7}
 8001548:	4770      	bx	lr

0800154a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800154a:	b480      	push	{r7}
 800154c:	b085      	sub	sp, #20
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
 8001552:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001560:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001562:	683a      	ldr	r2, [r7, #0]
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	4313      	orrs	r3, r2
 8001568:	f043 0307 	orr.w	r3, r3, #7
 800156c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	68fa      	ldr	r2, [r7, #12]
 8001572:	609a      	str	r2, [r3, #8]
}
 8001574:	bf00      	nop
 8001576:	3714      	adds	r7, #20
 8001578:	46bd      	mov	sp, r7
 800157a:	bc80      	pop	{r7}
 800157c:	4770      	bx	lr

0800157e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800157e:	b480      	push	{r7}
 8001580:	b087      	sub	sp, #28
 8001582:	af00      	add	r7, sp, #0
 8001584:	60f8      	str	r0, [r7, #12]
 8001586:	60b9      	str	r1, [r7, #8]
 8001588:	607a      	str	r2, [r7, #4]
 800158a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001598:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	021a      	lsls	r2, r3, #8
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	431a      	orrs	r2, r3
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	697a      	ldr	r2, [r7, #20]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	697a      	ldr	r2, [r7, #20]
 80015b0:	609a      	str	r2, [r3, #8]
}
 80015b2:	bf00      	nop
 80015b4:	371c      	adds	r7, #28
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bc80      	pop	{r7}
 80015ba:	4770      	bx	lr

080015bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80015bc:	b480      	push	{r7}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d101      	bne.n	80015d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80015d0:	2302      	movs	r3, #2
 80015d2:	e032      	b.n	800163a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2201      	movs	r2, #1
 80015d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2202      	movs	r2, #2
 80015e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	68fa      	ldr	r2, [r7, #12]
 8001602:	4313      	orrs	r3, r2
 8001604:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800160c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	68ba      	ldr	r2, [r7, #8]
 8001614:	4313      	orrs	r3, r2
 8001616:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	68fa      	ldr	r2, [r7, #12]
 800161e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	68ba      	ldr	r2, [r7, #8]
 8001626:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2201      	movs	r2, #1
 800162c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2200      	movs	r2, #0
 8001634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3714      	adds	r7, #20
 800163e:	46bd      	mov	sp, r7
 8001640:	bc80      	pop	{r7}
 8001642:	4770      	bx	lr

08001644 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800164c:	bf00      	nop
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	bc80      	pop	{r7}
 8001654:	4770      	bx	lr

08001656 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001656:	b480      	push	{r7}
 8001658:	b083      	sub	sp, #12
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800165e:	bf00      	nop
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	bc80      	pop	{r7}
 8001666:	4770      	bx	lr

08001668 <myLCD_init>:
#include <LCDku.h>
#include "stm32f1xx_hal.h"
#include "main.h"
#include <stdio.h>

void myLCD_init(void){
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
	HAL_Delay(25);
 800166c:	2019      	movs	r0, #25
 800166e:	f7fe fdcf 	bl	8000210 <HAL_Delay>
	myLCD_command(0x33);
 8001672:	2033      	movs	r0, #51	; 0x33
 8001674:	f000 f89a 	bl	80017ac <myLCD_command>
	myLCD_command(0x32);
 8001678:	2032      	movs	r0, #50	; 0x32
 800167a:	f000 f897 	bl	80017ac <myLCD_command>
	myLCD_command(0x28);
 800167e:	2028      	movs	r0, #40	; 0x28
 8001680:	f000 f894 	bl	80017ac <myLCD_command>
	myLCD_command(0x0C);
 8001684:	200c      	movs	r0, #12
 8001686:	f000 f891 	bl	80017ac <myLCD_command>
	myLCD_command(0x01);
 800168a:	2001      	movs	r0, #1
 800168c:	f000 f88e 	bl	80017ac <myLCD_command>
}
 8001690:	bf00      	nop
 8001692:	bd80      	pop	{r7, pc}

08001694 <myLCD_write4bit>:
void myLCD_write4bit(uint8_t data){
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, ((data>>0)&1)? GPIO_PIN_SET:GPIO_PIN_RESET);
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	f003 0301 	and.w	r3, r3, #1
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	461a      	mov	r2, r3
 80016a8:	2180      	movs	r1, #128	; 0x80
 80016aa:	4814      	ldr	r0, [pc, #80]	; (80016fc <myLCD_write4bit+0x68>)
 80016ac:	f7ff f851 	bl	8000752 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, ((data>>1)&1)? GPIO_PIN_SET:GPIO_PIN_RESET);
 80016b0:	79fb      	ldrb	r3, [r7, #7]
 80016b2:	085b      	lsrs	r3, r3, #1
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	461a      	mov	r2, r3
 80016be:	2140      	movs	r1, #64	; 0x40
 80016c0:	480e      	ldr	r0, [pc, #56]	; (80016fc <myLCD_write4bit+0x68>)
 80016c2:	f7ff f846 	bl	8000752 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, ((data>>2)&1)? GPIO_PIN_SET:GPIO_PIN_RESET);
 80016c6:	79fb      	ldrb	r3, [r7, #7]
 80016c8:	089b      	lsrs	r3, r3, #2
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	f003 0301 	and.w	r3, r3, #1
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	461a      	mov	r2, r3
 80016d4:	2120      	movs	r1, #32
 80016d6:	4809      	ldr	r0, [pc, #36]	; (80016fc <myLCD_write4bit+0x68>)
 80016d8:	f7ff f83b 	bl	8000752 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, ((data>>3)&1)? GPIO_PIN_SET:GPIO_PIN_RESET);
 80016dc:	79fb      	ldrb	r3, [r7, #7]
 80016de:	08db      	lsrs	r3, r3, #3
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	461a      	mov	r2, r3
 80016ea:	2110      	movs	r1, #16
 80016ec:	4803      	ldr	r0, [pc, #12]	; (80016fc <myLCD_write4bit+0x68>)
 80016ee:	f7ff f830 	bl	8000752 <HAL_GPIO_WritePin>
}
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40010c00 	.word	0x40010c00

08001700 <myLCD_send>:

void myLCD_send(_Bool mode, uint8_t data){
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	460a      	mov	r2, r1
 800170a:	71fb      	strb	r3, [r7, #7]
 800170c:	4613      	mov	r3, r2
 800170e:	71bb      	strb	r3, [r7, #6]
	if(mode){ myLCD_RS(1); }
 8001710:	79fb      	ldrb	r3, [r7, #7]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d006      	beq.n	8001724 <myLCD_send+0x24>
 8001716:	2201      	movs	r2, #1
 8001718:	f44f 7100 	mov.w	r1, #512	; 0x200
 800171c:	4822      	ldr	r0, [pc, #136]	; (80017a8 <myLCD_send+0xa8>)
 800171e:	f7ff f818 	bl	8000752 <HAL_GPIO_WritePin>
 8001722:	e005      	b.n	8001730 <myLCD_send+0x30>
	else	{ myLCD_RS(0); }
 8001724:	2200      	movs	r2, #0
 8001726:	f44f 7100 	mov.w	r1, #512	; 0x200
 800172a:	481f      	ldr	r0, [pc, #124]	; (80017a8 <myLCD_send+0xa8>)
 800172c:	f7ff f811 	bl	8000752 <HAL_GPIO_WritePin>

	myLCD_write4bit(data>>4);
 8001730:	79bb      	ldrb	r3, [r7, #6]
 8001732:	091b      	lsrs	r3, r3, #4
 8001734:	b2db      	uxtb	r3, r3
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff ffac 	bl	8001694 <myLCD_write4bit>
	myLCD_E();
 800173c:	2201      	movs	r2, #1
 800173e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001742:	4819      	ldr	r0, [pc, #100]	; (80017a8 <myLCD_send+0xa8>)
 8001744:	f7ff f805 	bl	8000752 <HAL_GPIO_WritePin>
 8001748:	2300      	movs	r3, #0
 800174a:	81fb      	strh	r3, [r7, #14]
 800174c:	e002      	b.n	8001754 <myLCD_send+0x54>
 800174e:	89fb      	ldrh	r3, [r7, #14]
 8001750:	3301      	adds	r3, #1
 8001752:	81fb      	strh	r3, [r7, #14]
 8001754:	89fb      	ldrh	r3, [r7, #14]
 8001756:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800175a:	4293      	cmp	r3, r2
 800175c:	d9f7      	bls.n	800174e <myLCD_send+0x4e>
 800175e:	2200      	movs	r2, #0
 8001760:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001764:	4810      	ldr	r0, [pc, #64]	; (80017a8 <myLCD_send+0xa8>)
 8001766:	f7fe fff4 	bl	8000752 <HAL_GPIO_WritePin>
	myLCD_write4bit(data);
 800176a:	79bb      	ldrb	r3, [r7, #6]
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff ff91 	bl	8001694 <myLCD_write4bit>
	myLCD_E();
 8001772:	2201      	movs	r2, #1
 8001774:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001778:	480b      	ldr	r0, [pc, #44]	; (80017a8 <myLCD_send+0xa8>)
 800177a:	f7fe ffea 	bl	8000752 <HAL_GPIO_WritePin>
 800177e:	2300      	movs	r3, #0
 8001780:	81bb      	strh	r3, [r7, #12]
 8001782:	e002      	b.n	800178a <myLCD_send+0x8a>
 8001784:	89bb      	ldrh	r3, [r7, #12]
 8001786:	3301      	adds	r3, #1
 8001788:	81bb      	strh	r3, [r7, #12]
 800178a:	89bb      	ldrh	r3, [r7, #12]
 800178c:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001790:	4293      	cmp	r3, r2
 8001792:	d9f7      	bls.n	8001784 <myLCD_send+0x84>
 8001794:	2200      	movs	r2, #0
 8001796:	f44f 7180 	mov.w	r1, #256	; 0x100
 800179a:	4803      	ldr	r0, [pc, #12]	; (80017a8 <myLCD_send+0xa8>)
 800179c:	f7fe ffd9 	bl	8000752 <HAL_GPIO_WritePin>

}
 80017a0:	bf00      	nop
 80017a2:	3710      	adds	r7, #16
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40010c00 	.word	0x40010c00

080017ac <myLCD_command>:
void myLCD_command(uint8_t data){
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	71fb      	strb	r3, [r7, #7]
	myLCD_send(0, data);
 80017b6:	79fb      	ldrb	r3, [r7, #7]
 80017b8:	4619      	mov	r1, r3
 80017ba:	2000      	movs	r0, #0
 80017bc:	f7ff ffa0 	bl	8001700 <myLCD_send>
}
 80017c0:	bf00      	nop
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <myLCD_data>:
void myLCD_data(uint8_t data){
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	71fb      	strb	r3, [r7, #7]
	myLCD_send(1, data);
 80017d2:	79fb      	ldrb	r3, [r7, #7]
 80017d4:	4619      	mov	r1, r3
 80017d6:	2001      	movs	r0, #1
 80017d8:	f7ff ff92 	bl	8001700 <myLCD_send>
}
 80017dc:	bf00      	nop
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <myLCD_setCursor>:
void myLCD_setCursor(uint8_t x, uint8_t y){
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	460a      	mov	r2, r1
 80017ee:	71fb      	strb	r3, [r7, #7]
 80017f0:	4613      	mov	r3, r2
 80017f2:	71bb      	strb	r3, [r7, #6]
	if(y==0) {myLCD_command(0x80 + x); }
 80017f4:	79bb      	ldrb	r3, [r7, #6]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d105      	bne.n	8001806 <myLCD_setCursor+0x22>
 80017fa:	79fb      	ldrb	r3, [r7, #7]
 80017fc:	3b80      	subs	r3, #128	; 0x80
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff ffd3 	bl	80017ac <myLCD_command>
	if(y==1) {myLCD_command(0xC0 + x); }
 8001806:	79bb      	ldrb	r3, [r7, #6]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d105      	bne.n	8001818 <myLCD_setCursor+0x34>
 800180c:	79fb      	ldrb	r3, [r7, #7]
 800180e:	3b40      	subs	r3, #64	; 0x40
 8001810:	b2db      	uxtb	r3, r3
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff ffca 	bl	80017ac <myLCD_command>
	if(y==2) {myLCD_command(0x94 + x); }
 8001818:	79bb      	ldrb	r3, [r7, #6]
 800181a:	2b02      	cmp	r3, #2
 800181c:	d105      	bne.n	800182a <myLCD_setCursor+0x46>
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	3b6c      	subs	r3, #108	; 0x6c
 8001822:	b2db      	uxtb	r3, r3
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff ffc1 	bl	80017ac <myLCD_command>
	if(y==3) {myLCD_command(0xD4 + x); }
 800182a:	79bb      	ldrb	r3, [r7, #6]
 800182c:	2b03      	cmp	r3, #3
 800182e:	d105      	bne.n	800183c <myLCD_setCursor+0x58>
 8001830:	79fb      	ldrb	r3, [r7, #7]
 8001832:	3b2c      	subs	r3, #44	; 0x2c
 8001834:	b2db      	uxtb	r3, r3
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff ffb8 	bl	80017ac <myLCD_command>
}
 800183c:	bf00      	nop
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <myLCD_print>:
void myLCD_print(char *pData){
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
	while(*pData){
 800184c:	e007      	b.n	800185e <myLCD_print+0x1a>
		myLCD_data(*pData);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff ffb8 	bl	80017c8 <myLCD_data>
		pData++;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	3301      	adds	r3, #1
 800185c:	607b      	str	r3, [r7, #4]
	while(*pData){
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d1f3      	bne.n	800184e <myLCD_print+0xa>
	}
}
 8001866:	bf00      	nop
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
	...

08001870 <myLCD_printNum>:
void myLCD_printNum(int16_t number){
 8001870:	b580      	push	{r7, lr}
 8001872:	b088      	sub	sp, #32
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	80fb      	strh	r3, [r7, #6]
	char buff[20];
	sprintf(buff,"%d",number);
 800187a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800187e:	f107 030c 	add.w	r3, r7, #12
 8001882:	4906      	ldr	r1, [pc, #24]	; (800189c <myLCD_printNum+0x2c>)
 8001884:	4618      	mov	r0, r3
 8001886:	f000 ff65 	bl	8002754 <siprintf>
	myLCD_print(buff);
 800188a:	f107 030c 	add.w	r3, r7, #12
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff ffd8 	bl	8001844 <myLCD_print>
}
 8001894:	bf00      	nop
 8001896:	3720      	adds	r7, #32
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	08002fa4 	.word	0x08002fa4

080018a0 <myLCD_clear>:
void myLCD_clear(void){
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
	myLCD_command(0x01);
 80018a4:	2001      	movs	r0, #1
 80018a6:	f7ff ff81 	bl	80017ac <myLCD_command>
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
	...

080018b0 <Task_init>:
volatile uint16_t debounce2=0xFF;
volatile uint16_t debounce3=0xFF;
volatile uint16_t debounce4=0xFF;
volatile uint16_t uang=0;

void Task_init(void){
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
	myLCD_init();
 80018b4:	f7ff fed8 	bl	8001668 <myLCD_init>
	myLCD_clear();
 80018b8:	f7ff fff2 	bl	80018a0 <myLCD_clear>
	ledDrop(0);
 80018bc:	2201      	movs	r2, #1
 80018be:	2140      	movs	r1, #64	; 0x40
 80018c0:	4807      	ldr	r0, [pc, #28]	; (80018e0 <Task_init+0x30>)
 80018c2:	f7fe ff46 	bl	8000752 <HAL_GPIO_WritePin>
	led500(0);
 80018c6:	2201      	movs	r2, #1
 80018c8:	2120      	movs	r1, #32
 80018ca:	4805      	ldr	r0, [pc, #20]	; (80018e0 <Task_init+0x30>)
 80018cc:	f7fe ff41 	bl	8000752 <HAL_GPIO_WritePin>
	led1000(0);
 80018d0:	2201      	movs	r2, #1
 80018d2:	2110      	movs	r1, #16
 80018d4:	4802      	ldr	r0, [pc, #8]	; (80018e0 <Task_init+0x30>)
 80018d6:	f7fe ff3c 	bl	8000752 <HAL_GPIO_WritePin>
}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40010800 	.word	0x40010800

080018e4 <Task_run>:

Task_run(){
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
	switch(stateku){
 80018e8:	4b8e      	ldr	r3, [pc, #568]	; (8001b24 <Task_run+0x240>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2b08      	cmp	r3, #8
 80018ee:	f200 83fa 	bhi.w	80020e6 <Task_run+0x802>
 80018f2:	a201      	add	r2, pc, #4	; (adr r2, 80018f8 <Task_run+0x14>)
 80018f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018f8:	0800191d 	.word	0x0800191d
 80018fc:	0800195d 	.word	0x0800195d
 8001900:	080019a3 	.word	0x080019a3
 8001904:	08001b69 	.word	0x08001b69
 8001908:	08001cfd 	.word	0x08001cfd
 800190c:	08001d81 	.word	0x08001d81
 8001910:	08001e25 	.word	0x08001e25
 8001914:	08001f47 	.word	0x08001f47
 8001918:	08002009 	.word	0x08002009
	case start:{
		myLCD_setCursor(0, 0); myLCD_print("Vending Machine");
 800191c:	2100      	movs	r1, #0
 800191e:	2000      	movs	r0, #0
 8001920:	f7ff ff60 	bl	80017e4 <myLCD_setCursor>
 8001924:	4880      	ldr	r0, [pc, #512]	; (8001b28 <Task_run+0x244>)
 8001926:	f7ff ff8d 	bl	8001844 <myLCD_print>
		myLCD_setCursor(0, 1); myLCD_print("Umroh Tul Khasanah");
 800192a:	2101      	movs	r1, #1
 800192c:	2000      	movs	r0, #0
 800192e:	f7ff ff59 	bl	80017e4 <myLCD_setCursor>
 8001932:	487e      	ldr	r0, [pc, #504]	; (8001b2c <Task_run+0x248>)
 8001934:	f7ff ff86 	bl	8001844 <myLCD_print>
		myLCD_setCursor(0, 2); myLCD_print("1110171037");
 8001938:	2102      	movs	r1, #2
 800193a:	2000      	movs	r0, #0
 800193c:	f7ff ff52 	bl	80017e4 <myLCD_setCursor>
 8001940:	487b      	ldr	r0, [pc, #492]	; (8001b30 <Task_run+0x24c>)
 8001942:	f7ff ff7f 	bl	8001844 <myLCD_print>
		myLCD_setCursor(0, 3); myLCD_print("3D4 Elektronika B");
 8001946:	2103      	movs	r1, #3
 8001948:	2000      	movs	r0, #0
 800194a:	f7ff ff4b 	bl	80017e4 <myLCD_setCursor>
 800194e:	4879      	ldr	r0, [pc, #484]	; (8001b34 <Task_run+0x250>)
 8001950:	f7ff ff78 	bl	8001844 <myLCD_print>
		stateku=startDelay;
 8001954:	4b73      	ldr	r3, [pc, #460]	; (8001b24 <Task_run+0x240>)
 8001956:	2201      	movs	r2, #1
 8001958:	701a      	strb	r2, [r3, #0]

	}break;
 800195a:	e3c4      	b.n	80020e6 <Task_run+0x802>

	case startDelay:{
		if(++delay > 1000){		//2mS * 1000
 800195c:	4b76      	ldr	r3, [pc, #472]	; (8001b38 <Task_run+0x254>)
 800195e:	881b      	ldrh	r3, [r3, #0]
 8001960:	b29b      	uxth	r3, r3
 8001962:	3301      	adds	r3, #1
 8001964:	b29b      	uxth	r3, r3
 8001966:	4a74      	ldr	r2, [pc, #464]	; (8001b38 <Task_run+0x254>)
 8001968:	4619      	mov	r1, r3
 800196a:	8011      	strh	r1, [r2, #0]
 800196c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001970:	f240 83aa 	bls.w	80020c8 <Task_run+0x7e4>
			delay=0;
 8001974:	4b70      	ldr	r3, [pc, #448]	; (8001b38 <Task_run+0x254>)
 8001976:	2200      	movs	r2, #0
 8001978:	801a      	strh	r2, [r3, #0]
			myLCD_clear();
 800197a:	f7ff ff91 	bl	80018a0 <myLCD_clear>
			myLCD_setCursor(0, 0); myLCD_print("Masukkan koin !");
 800197e:	2100      	movs	r1, #0
 8001980:	2000      	movs	r0, #0
 8001982:	f7ff ff2f 	bl	80017e4 <myLCD_setCursor>
 8001986:	486d      	ldr	r0, [pc, #436]	; (8001b3c <Task_run+0x258>)
 8001988:	f7ff ff5c 	bl	8001844 <myLCD_print>
			myLCD_setCursor(0, 1); myLCD_print("Harga permen Rp.1000");
 800198c:	2101      	movs	r1, #1
 800198e:	2000      	movs	r0, #0
 8001990:	f7ff ff28 	bl	80017e4 <myLCD_setCursor>
 8001994:	486a      	ldr	r0, [pc, #424]	; (8001b40 <Task_run+0x25c>)
 8001996:	f7ff ff55 	bl	8001844 <myLCD_print>
			stateku=coin1;
 800199a:	4b62      	ldr	r3, [pc, #392]	; (8001b24 <Task_run+0x240>)
 800199c:	2202      	movs	r2, #2
 800199e:	701a      	strb	r2, [r3, #0]
		}

	}break;
 80019a0:	e392      	b.n	80020c8 <Task_run+0x7e4>

	case coin1:{
		myLCD_setCursor(0, 3); myLCD_print("Uang: Rp."); myLCD_printNum(uang);
 80019a2:	2103      	movs	r1, #3
 80019a4:	2000      	movs	r0, #0
 80019a6:	f7ff ff1d 	bl	80017e4 <myLCD_setCursor>
 80019aa:	4866      	ldr	r0, [pc, #408]	; (8001b44 <Task_run+0x260>)
 80019ac:	f7ff ff4a 	bl	8001844 <myLCD_print>
 80019b0:	4b65      	ldr	r3, [pc, #404]	; (8001b48 <Task_run+0x264>)
 80019b2:	881b      	ldrh	r3, [r3, #0]
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	b21b      	sxth	r3, r3
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff ff59 	bl	8001870 <myLCD_printNum>
		if(PB_500()){
 80019be:	f000 fc0f 	bl	80021e0 <PB_500>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d017      	beq.n	80019f8 <Task_run+0x114>
			myLCD_clear();
 80019c8:	f7ff ff6a 	bl	80018a0 <myLCD_clear>
			myLCD_setCursor(0, 0); myLCD_print("Rp.500");
 80019cc:	2100      	movs	r1, #0
 80019ce:	2000      	movs	r0, #0
 80019d0:	f7ff ff08 	bl	80017e4 <myLCD_setCursor>
 80019d4:	485d      	ldr	r0, [pc, #372]	; (8001b4c <Task_run+0x268>)
 80019d6:	f7ff ff35 	bl	8001844 <myLCD_print>
			myLCD_setCursor(0, 1); myLCD_print("Berhasil Dimasukkan!");
 80019da:	2101      	movs	r1, #1
 80019dc:	2000      	movs	r0, #0
 80019de:	f7ff ff01 	bl	80017e4 <myLCD_setCursor>
 80019e2:	485b      	ldr	r0, [pc, #364]	; (8001b50 <Task_run+0x26c>)
 80019e4:	f7ff ff2e 	bl	8001844 <myLCD_print>
			buzzer(1);
 80019e8:	2201      	movs	r2, #1
 80019ea:	2108      	movs	r1, #8
 80019ec:	4859      	ldr	r0, [pc, #356]	; (8001b54 <Task_run+0x270>)
 80019ee:	f7fe feb0 	bl	8000752 <HAL_GPIO_WritePin>
			Flagku=masuk500;
 80019f2:	4b59      	ldr	r3, [pc, #356]	; (8001b58 <Task_run+0x274>)
 80019f4:	2201      	movs	r2, #1
 80019f6:	701a      	strb	r2, [r3, #0]
		}

		if(Flagku==masuk500){
 80019f8:	4b57      	ldr	r3, [pc, #348]	; (8001b58 <Task_run+0x274>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d12f      	bne.n	8001a60 <Task_run+0x17c>
			if(++delay > 80){
 8001a00:	4b4d      	ldr	r3, [pc, #308]	; (8001b38 <Task_run+0x254>)
 8001a02:	881b      	ldrh	r3, [r3, #0]
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	3301      	adds	r3, #1
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	4a4b      	ldr	r2, [pc, #300]	; (8001b38 <Task_run+0x254>)
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	8011      	strh	r1, [r2, #0]
 8001a10:	2b50      	cmp	r3, #80	; 0x50
 8001a12:	d925      	bls.n	8001a60 <Task_run+0x17c>
				delay=0;
 8001a14:	4b48      	ldr	r3, [pc, #288]	; (8001b38 <Task_run+0x254>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	801a      	strh	r2, [r3, #0]
				uang = uang + 500;
 8001a1a:	4b4b      	ldr	r3, [pc, #300]	; (8001b48 <Task_run+0x264>)
 8001a1c:	881b      	ldrh	r3, [r3, #0]
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001a24:	b29a      	uxth	r2, r3
 8001a26:	4b48      	ldr	r3, [pc, #288]	; (8001b48 <Task_run+0x264>)
 8001a28:	801a      	strh	r2, [r3, #0]
				buzzer(0);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	2108      	movs	r1, #8
 8001a2e:	4849      	ldr	r0, [pc, #292]	; (8001b54 <Task_run+0x270>)
 8001a30:	f7fe fe8f 	bl	8000752 <HAL_GPIO_WritePin>
				myLCD_clear();
 8001a34:	f7ff ff34 	bl	80018a0 <myLCD_clear>
				myLCD_setCursor(0, 0); myLCD_print("Masukkan koin !");
 8001a38:	2100      	movs	r1, #0
 8001a3a:	2000      	movs	r0, #0
 8001a3c:	f7ff fed2 	bl	80017e4 <myLCD_setCursor>
 8001a40:	483e      	ldr	r0, [pc, #248]	; (8001b3c <Task_run+0x258>)
 8001a42:	f7ff feff 	bl	8001844 <myLCD_print>
				myLCD_setCursor(0, 1); myLCD_print("Harga permen Rp.1000");
 8001a46:	2101      	movs	r1, #1
 8001a48:	2000      	movs	r0, #0
 8001a4a:	f7ff fecb 	bl	80017e4 <myLCD_setCursor>
 8001a4e:	483c      	ldr	r0, [pc, #240]	; (8001b40 <Task_run+0x25c>)
 8001a50:	f7ff fef8 	bl	8001844 <myLCD_print>
				Flagku=tdkKoin;
 8001a54:	4b40      	ldr	r3, [pc, #256]	; (8001b58 <Task_run+0x274>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	701a      	strb	r2, [r3, #0]
				stateku=coin2;
 8001a5a:	4b32      	ldr	r3, [pc, #200]	; (8001b24 <Task_run+0x240>)
 8001a5c:	2203      	movs	r2, #3
 8001a5e:	701a      	strb	r2, [r3, #0]
			}
		}
		if(PB_1000()){
 8001a60:	f000 fbee 	bl	8002240 <PB_1000>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d017      	beq.n	8001a9a <Task_run+0x1b6>
			myLCD_clear();
 8001a6a:	f7ff ff19 	bl	80018a0 <myLCD_clear>
			myLCD_setCursor(0, 0); myLCD_print("Rp.1000");
 8001a6e:	2100      	movs	r1, #0
 8001a70:	2000      	movs	r0, #0
 8001a72:	f7ff feb7 	bl	80017e4 <myLCD_setCursor>
 8001a76:	4839      	ldr	r0, [pc, #228]	; (8001b5c <Task_run+0x278>)
 8001a78:	f7ff fee4 	bl	8001844 <myLCD_print>
			myLCD_setCursor(0, 1); myLCD_print("Berhasil Dimasukkan!");
 8001a7c:	2101      	movs	r1, #1
 8001a7e:	2000      	movs	r0, #0
 8001a80:	f7ff feb0 	bl	80017e4 <myLCD_setCursor>
 8001a84:	4832      	ldr	r0, [pc, #200]	; (8001b50 <Task_run+0x26c>)
 8001a86:	f7ff fedd 	bl	8001844 <myLCD_print>
			buzzer(1);
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	2108      	movs	r1, #8
 8001a8e:	4831      	ldr	r0, [pc, #196]	; (8001b54 <Task_run+0x270>)
 8001a90:	f7fe fe5f 	bl	8000752 <HAL_GPIO_WritePin>
			Flagku=masuk1000;
 8001a94:	4b30      	ldr	r3, [pc, #192]	; (8001b58 <Task_run+0x274>)
 8001a96:	2202      	movs	r2, #2
 8001a98:	701a      	strb	r2, [r3, #0]
		}

		if(Flagku==masuk1000){
 8001a9a:	4b2f      	ldr	r3, [pc, #188]	; (8001b58 <Task_run+0x274>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	f040 8314 	bne.w	80020cc <Task_run+0x7e8>
			if(++delay > 80){
 8001aa4:	4b24      	ldr	r3, [pc, #144]	; (8001b38 <Task_run+0x254>)
 8001aa6:	881b      	ldrh	r3, [r3, #0]
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	3301      	adds	r3, #1
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	4a22      	ldr	r2, [pc, #136]	; (8001b38 <Task_run+0x254>)
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	8011      	strh	r1, [r2, #0]
 8001ab4:	2b50      	cmp	r3, #80	; 0x50
 8001ab6:	f240 8309 	bls.w	80020cc <Task_run+0x7e8>
				delay=0;
 8001aba:	4b1f      	ldr	r3, [pc, #124]	; (8001b38 <Task_run+0x254>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	801a      	strh	r2, [r3, #0]
				uang = uang + 1000;
 8001ac0:	4b21      	ldr	r3, [pc, #132]	; (8001b48 <Task_run+0x264>)
 8001ac2:	881b      	ldrh	r3, [r3, #0]
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001aca:	b29a      	uxth	r2, r3
 8001acc:	4b1e      	ldr	r3, [pc, #120]	; (8001b48 <Task_run+0x264>)
 8001ace:	801a      	strh	r2, [r3, #0]
				buzzer(0);
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	2108      	movs	r1, #8
 8001ad4:	481f      	ldr	r0, [pc, #124]	; (8001b54 <Task_run+0x270>)
 8001ad6:	f7fe fe3c 	bl	8000752 <HAL_GPIO_WritePin>
				myLCD_clear();
 8001ada:	f7ff fee1 	bl	80018a0 <myLCD_clear>
				Flagku=tdkKoin;
 8001ade:	4b1e      	ldr	r3, [pc, #120]	; (8001b58 <Task_run+0x274>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	701a      	strb	r2, [r3, #0]
				myLCD_setCursor(0, 0); myLCD_print("Yakin Beli ?");
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	2000      	movs	r0, #0
 8001ae8:	f7ff fe7c 	bl	80017e4 <myLCD_setCursor>
 8001aec:	481c      	ldr	r0, [pc, #112]	; (8001b60 <Task_run+0x27c>)
 8001aee:	f7ff fea9 	bl	8001844 <myLCD_print>
				myLCD_setCursor(0, 1); myLCD_print("[Proses/Batal]");
 8001af2:	2101      	movs	r1, #1
 8001af4:	2000      	movs	r0, #0
 8001af6:	f7ff fe75 	bl	80017e4 <myLCD_setCursor>
 8001afa:	481a      	ldr	r0, [pc, #104]	; (8001b64 <Task_run+0x280>)
 8001afc:	f7ff fea2 	bl	8001844 <myLCD_print>
				myLCD_setCursor(0, 3); myLCD_print("Uang: Rp."); myLCD_printNum(uang);
 8001b00:	2103      	movs	r1, #3
 8001b02:	2000      	movs	r0, #0
 8001b04:	f7ff fe6e 	bl	80017e4 <myLCD_setCursor>
 8001b08:	480e      	ldr	r0, [pc, #56]	; (8001b44 <Task_run+0x260>)
 8001b0a:	f7ff fe9b 	bl	8001844 <myLCD_print>
 8001b0e:	4b0e      	ldr	r3, [pc, #56]	; (8001b48 <Task_run+0x264>)
 8001b10:	881b      	ldrh	r3, [r3, #0]
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	b21b      	sxth	r3, r3
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff feaa 	bl	8001870 <myLCD_printNum>
				stateku=siap;
 8001b1c:	4b01      	ldr	r3, [pc, #4]	; (8001b24 <Task_run+0x240>)
 8001b1e:	2204      	movs	r2, #4
 8001b20:	701a      	strb	r2, [r3, #0]
			}
		}

	}break;
 8001b22:	e2d3      	b.n	80020cc <Task_run+0x7e8>
 8001b24:	200000a8 	.word	0x200000a8
 8001b28:	08002fa8 	.word	0x08002fa8
 8001b2c:	08002fb8 	.word	0x08002fb8
 8001b30:	08002fcc 	.word	0x08002fcc
 8001b34:	08002fd8 	.word	0x08002fd8
 8001b38:	20000094 	.word	0x20000094
 8001b3c:	08002fec 	.word	0x08002fec
 8001b40:	08002ffc 	.word	0x08002ffc
 8001b44:	08003014 	.word	0x08003014
 8001b48:	20000096 	.word	0x20000096
 8001b4c:	08003020 	.word	0x08003020
 8001b50:	08003028 	.word	0x08003028
 8001b54:	40010c00 	.word	0x40010c00
 8001b58:	200000a9 	.word	0x200000a9
 8001b5c:	08003040 	.word	0x08003040
 8001b60:	08003048 	.word	0x08003048
 8001b64:	08003058 	.word	0x08003058

	case coin2:{
		myLCD_setCursor(0, 3); myLCD_print("Uang: Rp."); myLCD_printNum(uang);
 8001b68:	2103      	movs	r1, #3
 8001b6a:	2000      	movs	r0, #0
 8001b6c:	f7ff fe3a 	bl	80017e4 <myLCD_setCursor>
 8001b70:	489e      	ldr	r0, [pc, #632]	; (8001dec <Task_run+0x508>)
 8001b72:	f7ff fe67 	bl	8001844 <myLCD_print>
 8001b76:	4b9e      	ldr	r3, [pc, #632]	; (8001df0 <Task_run+0x50c>)
 8001b78:	881b      	ldrh	r3, [r3, #0]
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	b21b      	sxth	r3, r3
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff fe76 	bl	8001870 <myLCD_printNum>
		if(PB_500()){
 8001b84:	f000 fb2c 	bl	80021e0 <PB_500>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d017      	beq.n	8001bbe <Task_run+0x2da>
			myLCD_clear();
 8001b8e:	f7ff fe87 	bl	80018a0 <myLCD_clear>
			myLCD_setCursor(0, 0); myLCD_print("Rp.500");
 8001b92:	2100      	movs	r1, #0
 8001b94:	2000      	movs	r0, #0
 8001b96:	f7ff fe25 	bl	80017e4 <myLCD_setCursor>
 8001b9a:	4896      	ldr	r0, [pc, #600]	; (8001df4 <Task_run+0x510>)
 8001b9c:	f7ff fe52 	bl	8001844 <myLCD_print>
			myLCD_setCursor(0, 1); myLCD_print("Berhasil Dimasukkan!");
 8001ba0:	2101      	movs	r1, #1
 8001ba2:	2000      	movs	r0, #0
 8001ba4:	f7ff fe1e 	bl	80017e4 <myLCD_setCursor>
 8001ba8:	4893      	ldr	r0, [pc, #588]	; (8001df8 <Task_run+0x514>)
 8001baa:	f7ff fe4b 	bl	8001844 <myLCD_print>
			buzzer(1);
 8001bae:	2201      	movs	r2, #1
 8001bb0:	2108      	movs	r1, #8
 8001bb2:	4892      	ldr	r0, [pc, #584]	; (8001dfc <Task_run+0x518>)
 8001bb4:	f7fe fdcd 	bl	8000752 <HAL_GPIO_WritePin>
			Flagku=masuk500;
 8001bb8:	4b91      	ldr	r3, [pc, #580]	; (8001e00 <Task_run+0x51c>)
 8001bba:	2201      	movs	r2, #1
 8001bbc:	701a      	strb	r2, [r3, #0]
		}

		if(Flagku==masuk500){
 8001bbe:	4b90      	ldr	r3, [pc, #576]	; (8001e00 <Task_run+0x51c>)
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d13d      	bne.n	8001c42 <Task_run+0x35e>
			if(++delay > 80){
 8001bc6:	4b8f      	ldr	r3, [pc, #572]	; (8001e04 <Task_run+0x520>)
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	3301      	adds	r3, #1
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	4a8c      	ldr	r2, [pc, #560]	; (8001e04 <Task_run+0x520>)
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	8011      	strh	r1, [r2, #0]
 8001bd6:	2b50      	cmp	r3, #80	; 0x50
 8001bd8:	d933      	bls.n	8001c42 <Task_run+0x35e>
				delay=0;
 8001bda:	4b8a      	ldr	r3, [pc, #552]	; (8001e04 <Task_run+0x520>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	801a      	strh	r2, [r3, #0]
				uang = uang + 500;
 8001be0:	4b83      	ldr	r3, [pc, #524]	; (8001df0 <Task_run+0x50c>)
 8001be2:	881b      	ldrh	r3, [r3, #0]
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	4b80      	ldr	r3, [pc, #512]	; (8001df0 <Task_run+0x50c>)
 8001bee:	801a      	strh	r2, [r3, #0]
				buzzer(0);
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	2108      	movs	r1, #8
 8001bf4:	4881      	ldr	r0, [pc, #516]	; (8001dfc <Task_run+0x518>)
 8001bf6:	f7fe fdac 	bl	8000752 <HAL_GPIO_WritePin>
				myLCD_clear();
 8001bfa:	f7ff fe51 	bl	80018a0 <myLCD_clear>
				Flagku=tdkKoin;
 8001bfe:	4b80      	ldr	r3, [pc, #512]	; (8001e00 <Task_run+0x51c>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	701a      	strb	r2, [r3, #0]
				myLCD_setCursor(0, 0); myLCD_print("Yakin Beli ?");
 8001c04:	2100      	movs	r1, #0
 8001c06:	2000      	movs	r0, #0
 8001c08:	f7ff fdec 	bl	80017e4 <myLCD_setCursor>
 8001c0c:	487e      	ldr	r0, [pc, #504]	; (8001e08 <Task_run+0x524>)
 8001c0e:	f7ff fe19 	bl	8001844 <myLCD_print>
				myLCD_setCursor(0, 1); myLCD_print("[Proses/Batal]");
 8001c12:	2101      	movs	r1, #1
 8001c14:	2000      	movs	r0, #0
 8001c16:	f7ff fde5 	bl	80017e4 <myLCD_setCursor>
 8001c1a:	487c      	ldr	r0, [pc, #496]	; (8001e0c <Task_run+0x528>)
 8001c1c:	f7ff fe12 	bl	8001844 <myLCD_print>
				myLCD_setCursor(0, 3); myLCD_print("Uang: Rp."); myLCD_printNum(uang);
 8001c20:	2103      	movs	r1, #3
 8001c22:	2000      	movs	r0, #0
 8001c24:	f7ff fdde 	bl	80017e4 <myLCD_setCursor>
 8001c28:	4870      	ldr	r0, [pc, #448]	; (8001dec <Task_run+0x508>)
 8001c2a:	f7ff fe0b 	bl	8001844 <myLCD_print>
 8001c2e:	4b70      	ldr	r3, [pc, #448]	; (8001df0 <Task_run+0x50c>)
 8001c30:	881b      	ldrh	r3, [r3, #0]
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	b21b      	sxth	r3, r3
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff fe1a 	bl	8001870 <myLCD_printNum>
				stateku=siap;
 8001c3c:	4b74      	ldr	r3, [pc, #464]	; (8001e10 <Task_run+0x52c>)
 8001c3e:	2204      	movs	r2, #4
 8001c40:	701a      	strb	r2, [r3, #0]
			}
		}

		if(PB_1000()){
 8001c42:	f000 fafd 	bl	8002240 <PB_1000>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d017      	beq.n	8001c7c <Task_run+0x398>
			myLCD_clear();
 8001c4c:	f7ff fe28 	bl	80018a0 <myLCD_clear>
			myLCD_setCursor(0, 0); myLCD_print("Rp.1000");
 8001c50:	2100      	movs	r1, #0
 8001c52:	2000      	movs	r0, #0
 8001c54:	f7ff fdc6 	bl	80017e4 <myLCD_setCursor>
 8001c58:	486e      	ldr	r0, [pc, #440]	; (8001e14 <Task_run+0x530>)
 8001c5a:	f7ff fdf3 	bl	8001844 <myLCD_print>
			myLCD_setCursor(0, 1); myLCD_print("Berhasil Dimasukkan!");
 8001c5e:	2101      	movs	r1, #1
 8001c60:	2000      	movs	r0, #0
 8001c62:	f7ff fdbf 	bl	80017e4 <myLCD_setCursor>
 8001c66:	4864      	ldr	r0, [pc, #400]	; (8001df8 <Task_run+0x514>)
 8001c68:	f7ff fdec 	bl	8001844 <myLCD_print>
			buzzer(1);
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	2108      	movs	r1, #8
 8001c70:	4862      	ldr	r0, [pc, #392]	; (8001dfc <Task_run+0x518>)
 8001c72:	f7fe fd6e 	bl	8000752 <HAL_GPIO_WritePin>
			Flagku=masuk1000;
 8001c76:	4b62      	ldr	r3, [pc, #392]	; (8001e00 <Task_run+0x51c>)
 8001c78:	2202      	movs	r2, #2
 8001c7a:	701a      	strb	r2, [r3, #0]
		}

		if(Flagku==masuk1000){
 8001c7c:	4b60      	ldr	r3, [pc, #384]	; (8001e00 <Task_run+0x51c>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d12f      	bne.n	8001ce4 <Task_run+0x400>
			if(++delay > 80){
 8001c84:	4b5f      	ldr	r3, [pc, #380]	; (8001e04 <Task_run+0x520>)
 8001c86:	881b      	ldrh	r3, [r3, #0]
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	4a5d      	ldr	r2, [pc, #372]	; (8001e04 <Task_run+0x520>)
 8001c90:	4619      	mov	r1, r3
 8001c92:	8011      	strh	r1, [r2, #0]
 8001c94:	2b50      	cmp	r3, #80	; 0x50
 8001c96:	d925      	bls.n	8001ce4 <Task_run+0x400>
				delay=0;
 8001c98:	4b5a      	ldr	r3, [pc, #360]	; (8001e04 <Task_run+0x520>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	801a      	strh	r2, [r3, #0]
				uang = uang + 1000;
 8001c9e:	4b54      	ldr	r3, [pc, #336]	; (8001df0 <Task_run+0x50c>)
 8001ca0:	881b      	ldrh	r3, [r3, #0]
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001ca8:	b29a      	uxth	r2, r3
 8001caa:	4b51      	ldr	r3, [pc, #324]	; (8001df0 <Task_run+0x50c>)
 8001cac:	801a      	strh	r2, [r3, #0]
				buzzer(0);
 8001cae:	2200      	movs	r2, #0
 8001cb0:	2108      	movs	r1, #8
 8001cb2:	4852      	ldr	r0, [pc, #328]	; (8001dfc <Task_run+0x518>)
 8001cb4:	f7fe fd4d 	bl	8000752 <HAL_GPIO_WritePin>
				myLCD_clear();
 8001cb8:	f7ff fdf2 	bl	80018a0 <myLCD_clear>
				Flagku=tdkKoin;
 8001cbc:	4b50      	ldr	r3, [pc, #320]	; (8001e00 <Task_run+0x51c>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	701a      	strb	r2, [r3, #0]
//				myLCD_setCursor(0, 0); myLCD_print("Yakin Beli ?");
//				myLCD_setCursor(0, 1); myLCD_print("[Proses/Batal]");
				myLCD_setCursor(0, 3); myLCD_print("Uang: Rp."); myLCD_printNum(uang);
 8001cc2:	2103      	movs	r1, #3
 8001cc4:	2000      	movs	r0, #0
 8001cc6:	f7ff fd8d 	bl	80017e4 <myLCD_setCursor>
 8001cca:	4848      	ldr	r0, [pc, #288]	; (8001dec <Task_run+0x508>)
 8001ccc:	f7ff fdba 	bl	8001844 <myLCD_print>
 8001cd0:	4b47      	ldr	r3, [pc, #284]	; (8001df0 <Task_run+0x50c>)
 8001cd2:	881b      	ldrh	r3, [r3, #0]
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	b21b      	sxth	r3, r3
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff fdc9 	bl	8001870 <myLCD_printNum>
				stateku=k500;
 8001cde:	4b4c      	ldr	r3, [pc, #304]	; (8001e10 <Task_run+0x52c>)
 8001ce0:	2207      	movs	r2, #7
 8001ce2:	701a      	strb	r2, [r3, #0]
			}
		}


		if(PB_Cancel()){
 8001ce4:	f000 fa4c 	bl	8002180 <PB_Cancel>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f000 81f0 	beq.w	80020d0 <Task_run+0x7ec>
			myLCD_clear();
 8001cf0:	f7ff fdd6 	bl	80018a0 <myLCD_clear>
			stateku=batal;
 8001cf4:	4b46      	ldr	r3, [pc, #280]	; (8001e10 <Task_run+0x52c>)
 8001cf6:	2206      	movs	r2, #6
 8001cf8:	701a      	strb	r2, [r3, #0]
		}

	}break;
 8001cfa:	e1e9      	b.n	80020d0 <Task_run+0x7ec>

	case siap:{
		if(PB_Process()){
 8001cfc:	f000 fa10 	bl	8002120 <PB_Process>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d00c      	beq.n	8001d20 <Task_run+0x43c>
			uang = uang - 1000; 	//uang diambil untuk beli permen
 8001d06:	4b3a      	ldr	r3, [pc, #232]	; (8001df0 <Task_run+0x50c>)
 8001d08:	881b      	ldrh	r3, [r3, #0]
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001d10:	b29a      	uxth	r2, r3
 8001d12:	4b37      	ldr	r3, [pc, #220]	; (8001df0 <Task_run+0x50c>)
 8001d14:	801a      	strh	r2, [r3, #0]
			myLCD_clear();
 8001d16:	f7ff fdc3 	bl	80018a0 <myLCD_clear>
			stateku=drop;
 8001d1a:	4b3d      	ldr	r3, [pc, #244]	; (8001e10 <Task_run+0x52c>)
 8001d1c:	2205      	movs	r2, #5
 8001d1e:	701a      	strb	r2, [r3, #0]
		}
		if(PB_Cancel()){
 8001d20:	f000 fa2e 	bl	8002180 <PB_Cancel>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d004      	beq.n	8001d34 <Task_run+0x450>
			myLCD_clear();
 8001d2a:	f7ff fdb9 	bl	80018a0 <myLCD_clear>
			stateku=batal;
 8001d2e:	4b38      	ldr	r3, [pc, #224]	; (8001e10 <Task_run+0x52c>)
 8001d30:	2206      	movs	r2, #6
 8001d32:	701a      	strb	r2, [r3, #0]
		}
		if(PB_500()){
 8001d34:	f000 fa54 	bl	80021e0 <PB_500>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d00c      	beq.n	8001d58 <Task_run+0x474>
			uang = uang + 500; 	//masuk 500 lagi
 8001d3e:	4b2c      	ldr	r3, [pc, #176]	; (8001df0 <Task_run+0x50c>)
 8001d40:	881b      	ldrh	r3, [r3, #0]
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	4b29      	ldr	r3, [pc, #164]	; (8001df0 <Task_run+0x50c>)
 8001d4c:	801a      	strh	r2, [r3, #0]
			myLCD_clear();
 8001d4e:	f7ff fda7 	bl	80018a0 <myLCD_clear>
			stateku=k500;
 8001d52:	4b2f      	ldr	r3, [pc, #188]	; (8001e10 <Task_run+0x52c>)
 8001d54:	2207      	movs	r2, #7
 8001d56:	701a      	strb	r2, [r3, #0]
		}
		if(PB_1000()){
 8001d58:	f000 fa72 	bl	8002240 <PB_1000>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	f000 81b8 	beq.w	80020d4 <Task_run+0x7f0>
			uang = uang + 1000; //masuk 1000 lagi
 8001d64:	4b22      	ldr	r3, [pc, #136]	; (8001df0 <Task_run+0x50c>)
 8001d66:	881b      	ldrh	r3, [r3, #0]
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	4b1f      	ldr	r3, [pc, #124]	; (8001df0 <Task_run+0x50c>)
 8001d72:	801a      	strh	r2, [r3, #0]
			myLCD_clear();
 8001d74:	f7ff fd94 	bl	80018a0 <myLCD_clear>
			stateku=k1000;
 8001d78:	4b25      	ldr	r3, [pc, #148]	; (8001e10 <Task_run+0x52c>)
 8001d7a:	2208      	movs	r2, #8
 8001d7c:	701a      	strb	r2, [r3, #0]
		}

	}break;
 8001d7e:	e1a9      	b.n	80020d4 <Task_run+0x7f0>

	case drop:{
		myLCD_setCursor(0, 0); myLCD_print("Pembelian berhasil");
 8001d80:	2100      	movs	r1, #0
 8001d82:	2000      	movs	r0, #0
 8001d84:	f7ff fd2e 	bl	80017e4 <myLCD_setCursor>
 8001d88:	4823      	ldr	r0, [pc, #140]	; (8001e18 <Task_run+0x534>)
 8001d8a:	f7ff fd5b 	bl	8001844 <myLCD_print>
		myLCD_setCursor(0, 1); myLCD_print("Terimakasih !");
 8001d8e:	2101      	movs	r1, #1
 8001d90:	2000      	movs	r0, #0
 8001d92:	f7ff fd27 	bl	80017e4 <myLCD_setCursor>
 8001d96:	4821      	ldr	r0, [pc, #132]	; (8001e1c <Task_run+0x538>)
 8001d98:	f7ff fd54 	bl	8001844 <myLCD_print>
		ledDrop(1);
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	2140      	movs	r1, #64	; 0x40
 8001da0:	481f      	ldr	r0, [pc, #124]	; (8001e20 <Task_run+0x53c>)
 8001da2:	f7fe fcd6 	bl	8000752 <HAL_GPIO_WritePin>
		buzzer(1);
 8001da6:	2201      	movs	r2, #1
 8001da8:	2108      	movs	r1, #8
 8001daa:	4814      	ldr	r0, [pc, #80]	; (8001dfc <Task_run+0x518>)
 8001dac:	f7fe fcd1 	bl	8000752 <HAL_GPIO_WritePin>
		if(++delay > 80){
 8001db0:	4b14      	ldr	r3, [pc, #80]	; (8001e04 <Task_run+0x520>)
 8001db2:	881b      	ldrh	r3, [r3, #0]
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	3301      	adds	r3, #1
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	4a12      	ldr	r2, [pc, #72]	; (8001e04 <Task_run+0x520>)
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	8011      	strh	r1, [r2, #0]
 8001dc0:	2b50      	cmp	r3, #80	; 0x50
 8001dc2:	f240 8189 	bls.w	80020d8 <Task_run+0x7f4>
			delay=0;
 8001dc6:	4b0f      	ldr	r3, [pc, #60]	; (8001e04 <Task_run+0x520>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	801a      	strh	r2, [r3, #0]
			buzzer(0);
 8001dcc:	2200      	movs	r2, #0
 8001dce:	2108      	movs	r1, #8
 8001dd0:	480a      	ldr	r0, [pc, #40]	; (8001dfc <Task_run+0x518>)
 8001dd2:	f7fe fcbe 	bl	8000752 <HAL_GPIO_WritePin>
			myLCD_clear();
 8001dd6:	f7ff fd63 	bl	80018a0 <myLCD_clear>
			ledDrop(0);
 8001dda:	2201      	movs	r2, #1
 8001ddc:	2140      	movs	r1, #64	; 0x40
 8001dde:	4810      	ldr	r0, [pc, #64]	; (8001e20 <Task_run+0x53c>)
 8001de0:	f7fe fcb7 	bl	8000752 <HAL_GPIO_WritePin>
			stateku=start;
 8001de4:	4b0a      	ldr	r3, [pc, #40]	; (8001e10 <Task_run+0x52c>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	701a      	strb	r2, [r3, #0]
		}
	}break;
 8001dea:	e175      	b.n	80020d8 <Task_run+0x7f4>
 8001dec:	08003014 	.word	0x08003014
 8001df0:	20000096 	.word	0x20000096
 8001df4:	08003020 	.word	0x08003020
 8001df8:	08003028 	.word	0x08003028
 8001dfc:	40010c00 	.word	0x40010c00
 8001e00:	200000a9 	.word	0x200000a9
 8001e04:	20000094 	.word	0x20000094
 8001e08:	08003048 	.word	0x08003048
 8001e0c:	08003058 	.word	0x08003058
 8001e10:	200000a8 	.word	0x200000a8
 8001e14:	08003040 	.word	0x08003040
 8001e18:	08003068 	.word	0x08003068
 8001e1c:	0800307c 	.word	0x0800307c
 8001e20:	40010800 	.word	0x40010800

	case batal:{
		if(uang == 1000){
 8001e24:	4bb1      	ldr	r3, [pc, #708]	; (80020ec <Task_run+0x808>)
 8001e26:	881b      	ldrh	r3, [r3, #0]
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e2e:	d140      	bne.n	8001eb2 <Task_run+0x5ce>
			led1000(1);
 8001e30:	2200      	movs	r2, #0
 8001e32:	2110      	movs	r1, #16
 8001e34:	48ae      	ldr	r0, [pc, #696]	; (80020f0 <Task_run+0x80c>)
 8001e36:	f7fe fc8c 	bl	8000752 <HAL_GPIO_WritePin>
			buzzer(1);
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	2108      	movs	r1, #8
 8001e3e:	48ad      	ldr	r0, [pc, #692]	; (80020f4 <Task_run+0x810>)
 8001e40:	f7fe fc87 	bl	8000752 <HAL_GPIO_WritePin>
			myLCD_setCursor(0, 0); myLCD_print("Pembelian dibatalkan");
 8001e44:	2100      	movs	r1, #0
 8001e46:	2000      	movs	r0, #0
 8001e48:	f7ff fccc 	bl	80017e4 <myLCD_setCursor>
 8001e4c:	48aa      	ldr	r0, [pc, #680]	; (80020f8 <Task_run+0x814>)
 8001e4e:	f7ff fcf9 	bl	8001844 <myLCD_print>
			myLCD_setCursor(0, 1); myLCD_print("Rp.1000");
 8001e52:	2101      	movs	r1, #1
 8001e54:	2000      	movs	r0, #0
 8001e56:	f7ff fcc5 	bl	80017e4 <myLCD_setCursor>
 8001e5a:	48a8      	ldr	r0, [pc, #672]	; (80020fc <Task_run+0x818>)
 8001e5c:	f7ff fcf2 	bl	8001844 <myLCD_print>
			myLCD_setCursor(0, 2); myLCD_print("Dikembalikan !");
 8001e60:	2102      	movs	r1, #2
 8001e62:	2000      	movs	r0, #0
 8001e64:	f7ff fcbe 	bl	80017e4 <myLCD_setCursor>
 8001e68:	48a5      	ldr	r0, [pc, #660]	; (8002100 <Task_run+0x81c>)
 8001e6a:	f7ff fceb 	bl	8001844 <myLCD_print>
			if(++delay > 30){
 8001e6e:	4ba5      	ldr	r3, [pc, #660]	; (8002104 <Task_run+0x820>)
 8001e70:	881b      	ldrh	r3, [r3, #0]
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	3301      	adds	r3, #1
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	4aa2      	ldr	r2, [pc, #648]	; (8002104 <Task_run+0x820>)
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	8011      	strh	r1, [r2, #0]
 8001e7e:	2b1e      	cmp	r3, #30
 8001e80:	d917      	bls.n	8001eb2 <Task_run+0x5ce>
				uang = uang - 1000; //uang dikembalikan 1000
 8001e82:	4b9a      	ldr	r3, [pc, #616]	; (80020ec <Task_run+0x808>)
 8001e84:	881b      	ldrh	r3, [r3, #0]
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001e8c:	b29a      	uxth	r2, r3
 8001e8e:	4b97      	ldr	r3, [pc, #604]	; (80020ec <Task_run+0x808>)
 8001e90:	801a      	strh	r2, [r3, #0]
				delay=0;
 8001e92:	4b9c      	ldr	r3, [pc, #624]	; (8002104 <Task_run+0x820>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	801a      	strh	r2, [r3, #0]
				led1000(0);
 8001e98:	2201      	movs	r2, #1
 8001e9a:	2110      	movs	r1, #16
 8001e9c:	4894      	ldr	r0, [pc, #592]	; (80020f0 <Task_run+0x80c>)
 8001e9e:	f7fe fc58 	bl	8000752 <HAL_GPIO_WritePin>
				buzzer(0);
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	2108      	movs	r1, #8
 8001ea6:	4893      	ldr	r0, [pc, #588]	; (80020f4 <Task_run+0x810>)
 8001ea8:	f7fe fc53 	bl	8000752 <HAL_GPIO_WritePin>
				stateku = start;
 8001eac:	4b96      	ldr	r3, [pc, #600]	; (8002108 <Task_run+0x824>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	701a      	strb	r2, [r3, #0]
			}
		}

		if(uang == 500){
 8001eb2:	4b8e      	ldr	r3, [pc, #568]	; (80020ec <Task_run+0x808>)
 8001eb4:	881b      	ldrh	r3, [r3, #0]
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001ebc:	f040 810e 	bne.w	80020dc <Task_run+0x7f8>
			led500(1);
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	2120      	movs	r1, #32
 8001ec4:	488a      	ldr	r0, [pc, #552]	; (80020f0 <Task_run+0x80c>)
 8001ec6:	f7fe fc44 	bl	8000752 <HAL_GPIO_WritePin>
			buzzer(1);
 8001eca:	2201      	movs	r2, #1
 8001ecc:	2108      	movs	r1, #8
 8001ece:	4889      	ldr	r0, [pc, #548]	; (80020f4 <Task_run+0x810>)
 8001ed0:	f7fe fc3f 	bl	8000752 <HAL_GPIO_WritePin>
			myLCD_setCursor(0, 0); myLCD_print("Pembelian dibatalkan");
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	2000      	movs	r0, #0
 8001ed8:	f7ff fc84 	bl	80017e4 <myLCD_setCursor>
 8001edc:	4886      	ldr	r0, [pc, #536]	; (80020f8 <Task_run+0x814>)
 8001ede:	f7ff fcb1 	bl	8001844 <myLCD_print>
			myLCD_setCursor(0, 1); myLCD_print("Rp.500");
 8001ee2:	2101      	movs	r1, #1
 8001ee4:	2000      	movs	r0, #0
 8001ee6:	f7ff fc7d 	bl	80017e4 <myLCD_setCursor>
 8001eea:	4888      	ldr	r0, [pc, #544]	; (800210c <Task_run+0x828>)
 8001eec:	f7ff fcaa 	bl	8001844 <myLCD_print>
			myLCD_setCursor(0, 2); myLCD_print("Dikembalikan !");
 8001ef0:	2102      	movs	r1, #2
 8001ef2:	2000      	movs	r0, #0
 8001ef4:	f7ff fc76 	bl	80017e4 <myLCD_setCursor>
 8001ef8:	4881      	ldr	r0, [pc, #516]	; (8002100 <Task_run+0x81c>)
 8001efa:	f7ff fca3 	bl	8001844 <myLCD_print>
			if(++delay > 30){
 8001efe:	4b81      	ldr	r3, [pc, #516]	; (8002104 <Task_run+0x820>)
 8001f00:	881b      	ldrh	r3, [r3, #0]
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	3301      	adds	r3, #1
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	4a7e      	ldr	r2, [pc, #504]	; (8002104 <Task_run+0x820>)
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	8011      	strh	r1, [r2, #0]
 8001f0e:	2b1e      	cmp	r3, #30
 8001f10:	f240 80e4 	bls.w	80020dc <Task_run+0x7f8>
				uang = uang - 500; //uang dikembalikan 1000
 8001f14:	4b75      	ldr	r3, [pc, #468]	; (80020ec <Task_run+0x808>)
 8001f16:	881b      	ldrh	r3, [r3, #0]
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	4b72      	ldr	r3, [pc, #456]	; (80020ec <Task_run+0x808>)
 8001f22:	801a      	strh	r2, [r3, #0]
				delay=0;
 8001f24:	4b77      	ldr	r3, [pc, #476]	; (8002104 <Task_run+0x820>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	801a      	strh	r2, [r3, #0]
				led500(0);
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	2120      	movs	r1, #32
 8001f2e:	4870      	ldr	r0, [pc, #448]	; (80020f0 <Task_run+0x80c>)
 8001f30:	f7fe fc0f 	bl	8000752 <HAL_GPIO_WritePin>
				buzzer(0);
 8001f34:	2200      	movs	r2, #0
 8001f36:	2108      	movs	r1, #8
 8001f38:	486e      	ldr	r0, [pc, #440]	; (80020f4 <Task_run+0x810>)
 8001f3a:	f7fe fc0a 	bl	8000752 <HAL_GPIO_WritePin>
				stateku = start;
 8001f3e:	4b72      	ldr	r3, [pc, #456]	; (8002108 <Task_run+0x824>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	701a      	strb	r2, [r3, #0]
			}
		}
	}break;
 8001f44:	e0ca      	b.n	80020dc <Task_run+0x7f8>

	case k500:{
		led500(1);
 8001f46:	2200      	movs	r2, #0
 8001f48:	2120      	movs	r1, #32
 8001f4a:	4869      	ldr	r0, [pc, #420]	; (80020f0 <Task_run+0x80c>)
 8001f4c:	f7fe fc01 	bl	8000752 <HAL_GPIO_WritePin>
		buzzer(1);
 8001f50:	2201      	movs	r2, #1
 8001f52:	2108      	movs	r1, #8
 8001f54:	4867      	ldr	r0, [pc, #412]	; (80020f4 <Task_run+0x810>)
 8001f56:	f7fe fbfc 	bl	8000752 <HAL_GPIO_WritePin>
		myLCD_setCursor(0, 0); myLCD_print("Uang lebih !");
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	2000      	movs	r0, #0
 8001f5e:	f7ff fc41 	bl	80017e4 <myLCD_setCursor>
 8001f62:	486b      	ldr	r0, [pc, #428]	; (8002110 <Task_run+0x82c>)
 8001f64:	f7ff fc6e 	bl	8001844 <myLCD_print>
		myLCD_setCursor(0, 1); myLCD_print("Rp.500");
 8001f68:	2101      	movs	r1, #1
 8001f6a:	2000      	movs	r0, #0
 8001f6c:	f7ff fc3a 	bl	80017e4 <myLCD_setCursor>
 8001f70:	4866      	ldr	r0, [pc, #408]	; (800210c <Task_run+0x828>)
 8001f72:	f7ff fc67 	bl	8001844 <myLCD_print>
		myLCD_setCursor(0, 2); myLCD_print("Dikembalikan !");
 8001f76:	2102      	movs	r1, #2
 8001f78:	2000      	movs	r0, #0
 8001f7a:	f7ff fc33 	bl	80017e4 <myLCD_setCursor>
 8001f7e:	4860      	ldr	r0, [pc, #384]	; (8002100 <Task_run+0x81c>)
 8001f80:	f7ff fc60 	bl	8001844 <myLCD_print>
		if(++delay > 30){
 8001f84:	4b5f      	ldr	r3, [pc, #380]	; (8002104 <Task_run+0x820>)
 8001f86:	881b      	ldrh	r3, [r3, #0]
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	4a5d      	ldr	r2, [pc, #372]	; (8002104 <Task_run+0x820>)
 8001f90:	4619      	mov	r1, r3
 8001f92:	8011      	strh	r1, [r2, #0]
 8001f94:	2b1e      	cmp	r3, #30
 8001f96:	f240 80a3 	bls.w	80020e0 <Task_run+0x7fc>
			uang = uang - 500; //uang dikembalikan 500
 8001f9a:	4b54      	ldr	r3, [pc, #336]	; (80020ec <Task_run+0x808>)
 8001f9c:	881b      	ldrh	r3, [r3, #0]
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8001fa4:	b29a      	uxth	r2, r3
 8001fa6:	4b51      	ldr	r3, [pc, #324]	; (80020ec <Task_run+0x808>)
 8001fa8:	801a      	strh	r2, [r3, #0]
			delay=0;
 8001faa:	4b56      	ldr	r3, [pc, #344]	; (8002104 <Task_run+0x820>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	801a      	strh	r2, [r3, #0]
			led500(0);
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	2120      	movs	r1, #32
 8001fb4:	484e      	ldr	r0, [pc, #312]	; (80020f0 <Task_run+0x80c>)
 8001fb6:	f7fe fbcc 	bl	8000752 <HAL_GPIO_WritePin>
			buzzer(0);
 8001fba:	2200      	movs	r2, #0
 8001fbc:	2108      	movs	r1, #8
 8001fbe:	484d      	ldr	r0, [pc, #308]	; (80020f4 <Task_run+0x810>)
 8001fc0:	f7fe fbc7 	bl	8000752 <HAL_GPIO_WritePin>
			myLCD_clear();
 8001fc4:	f7ff fc6c 	bl	80018a0 <myLCD_clear>
			myLCD_setCursor(0, 0); myLCD_print("Yakin Beli ?");
 8001fc8:	2100      	movs	r1, #0
 8001fca:	2000      	movs	r0, #0
 8001fcc:	f7ff fc0a 	bl	80017e4 <myLCD_setCursor>
 8001fd0:	4850      	ldr	r0, [pc, #320]	; (8002114 <Task_run+0x830>)
 8001fd2:	f7ff fc37 	bl	8001844 <myLCD_print>
			myLCD_setCursor(0, 1); myLCD_print("[Proses/Batal]");
 8001fd6:	2101      	movs	r1, #1
 8001fd8:	2000      	movs	r0, #0
 8001fda:	f7ff fc03 	bl	80017e4 <myLCD_setCursor>
 8001fde:	484e      	ldr	r0, [pc, #312]	; (8002118 <Task_run+0x834>)
 8001fe0:	f7ff fc30 	bl	8001844 <myLCD_print>
			myLCD_setCursor(0, 3); myLCD_print("Uang: Rp."); myLCD_printNum(uang);
 8001fe4:	2103      	movs	r1, #3
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	f7ff fbfc 	bl	80017e4 <myLCD_setCursor>
 8001fec:	484b      	ldr	r0, [pc, #300]	; (800211c <Task_run+0x838>)
 8001fee:	f7ff fc29 	bl	8001844 <myLCD_print>
 8001ff2:	4b3e      	ldr	r3, [pc, #248]	; (80020ec <Task_run+0x808>)
 8001ff4:	881b      	ldrh	r3, [r3, #0]
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	b21b      	sxth	r3, r3
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7ff fc38 	bl	8001870 <myLCD_printNum>
			stateku = siap;
 8002000:	4b41      	ldr	r3, [pc, #260]	; (8002108 <Task_run+0x824>)
 8002002:	2204      	movs	r2, #4
 8002004:	701a      	strb	r2, [r3, #0]
		}

	}break;
 8002006:	e06b      	b.n	80020e0 <Task_run+0x7fc>

	case k1000:{
		led1000(1);
 8002008:	2200      	movs	r2, #0
 800200a:	2110      	movs	r1, #16
 800200c:	4838      	ldr	r0, [pc, #224]	; (80020f0 <Task_run+0x80c>)
 800200e:	f7fe fba0 	bl	8000752 <HAL_GPIO_WritePin>
		buzzer(1);
 8002012:	2201      	movs	r2, #1
 8002014:	2108      	movs	r1, #8
 8002016:	4837      	ldr	r0, [pc, #220]	; (80020f4 <Task_run+0x810>)
 8002018:	f7fe fb9b 	bl	8000752 <HAL_GPIO_WritePin>
		myLCD_setCursor(0, 0); myLCD_print("Uang lebih !");
 800201c:	2100      	movs	r1, #0
 800201e:	2000      	movs	r0, #0
 8002020:	f7ff fbe0 	bl	80017e4 <myLCD_setCursor>
 8002024:	483a      	ldr	r0, [pc, #232]	; (8002110 <Task_run+0x82c>)
 8002026:	f7ff fc0d 	bl	8001844 <myLCD_print>
		myLCD_setCursor(0, 1); myLCD_print("Rp.1000");
 800202a:	2101      	movs	r1, #1
 800202c:	2000      	movs	r0, #0
 800202e:	f7ff fbd9 	bl	80017e4 <myLCD_setCursor>
 8002032:	4832      	ldr	r0, [pc, #200]	; (80020fc <Task_run+0x818>)
 8002034:	f7ff fc06 	bl	8001844 <myLCD_print>
		myLCD_setCursor(0, 2); myLCD_print("Dikembalikan !");
 8002038:	2102      	movs	r1, #2
 800203a:	2000      	movs	r0, #0
 800203c:	f7ff fbd2 	bl	80017e4 <myLCD_setCursor>
 8002040:	482f      	ldr	r0, [pc, #188]	; (8002100 <Task_run+0x81c>)
 8002042:	f7ff fbff 	bl	8001844 <myLCD_print>
		if(++delay > 30){
 8002046:	4b2f      	ldr	r3, [pc, #188]	; (8002104 <Task_run+0x820>)
 8002048:	881b      	ldrh	r3, [r3, #0]
 800204a:	b29b      	uxth	r3, r3
 800204c:	3301      	adds	r3, #1
 800204e:	b29b      	uxth	r3, r3
 8002050:	4a2c      	ldr	r2, [pc, #176]	; (8002104 <Task_run+0x820>)
 8002052:	4619      	mov	r1, r3
 8002054:	8011      	strh	r1, [r2, #0]
 8002056:	2b1e      	cmp	r3, #30
 8002058:	d944      	bls.n	80020e4 <Task_run+0x800>
			uang = uang - 1000; //uang dikembalikan 500
 800205a:	4b24      	ldr	r3, [pc, #144]	; (80020ec <Task_run+0x808>)
 800205c:	881b      	ldrh	r3, [r3, #0]
 800205e:	b29b      	uxth	r3, r3
 8002060:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002064:	b29a      	uxth	r2, r3
 8002066:	4b21      	ldr	r3, [pc, #132]	; (80020ec <Task_run+0x808>)
 8002068:	801a      	strh	r2, [r3, #0]
			delay=0;
 800206a:	4b26      	ldr	r3, [pc, #152]	; (8002104 <Task_run+0x820>)
 800206c:	2200      	movs	r2, #0
 800206e:	801a      	strh	r2, [r3, #0]
			led1000(0);
 8002070:	2201      	movs	r2, #1
 8002072:	2110      	movs	r1, #16
 8002074:	481e      	ldr	r0, [pc, #120]	; (80020f0 <Task_run+0x80c>)
 8002076:	f7fe fb6c 	bl	8000752 <HAL_GPIO_WritePin>
			buzzer(0);
 800207a:	2200      	movs	r2, #0
 800207c:	2108      	movs	r1, #8
 800207e:	481d      	ldr	r0, [pc, #116]	; (80020f4 <Task_run+0x810>)
 8002080:	f7fe fb67 	bl	8000752 <HAL_GPIO_WritePin>
			myLCD_clear();
 8002084:	f7ff fc0c 	bl	80018a0 <myLCD_clear>
			myLCD_setCursor(0, 0); myLCD_print("Yakin Beli ?");
 8002088:	2100      	movs	r1, #0
 800208a:	2000      	movs	r0, #0
 800208c:	f7ff fbaa 	bl	80017e4 <myLCD_setCursor>
 8002090:	4820      	ldr	r0, [pc, #128]	; (8002114 <Task_run+0x830>)
 8002092:	f7ff fbd7 	bl	8001844 <myLCD_print>
			myLCD_setCursor(0, 1); myLCD_print("[Proses/Batal]");
 8002096:	2101      	movs	r1, #1
 8002098:	2000      	movs	r0, #0
 800209a:	f7ff fba3 	bl	80017e4 <myLCD_setCursor>
 800209e:	481e      	ldr	r0, [pc, #120]	; (8002118 <Task_run+0x834>)
 80020a0:	f7ff fbd0 	bl	8001844 <myLCD_print>
			myLCD_setCursor(0, 3); myLCD_print("Uang: Rp."); myLCD_printNum(uang);
 80020a4:	2103      	movs	r1, #3
 80020a6:	2000      	movs	r0, #0
 80020a8:	f7ff fb9c 	bl	80017e4 <myLCD_setCursor>
 80020ac:	481b      	ldr	r0, [pc, #108]	; (800211c <Task_run+0x838>)
 80020ae:	f7ff fbc9 	bl	8001844 <myLCD_print>
 80020b2:	4b0e      	ldr	r3, [pc, #56]	; (80020ec <Task_run+0x808>)
 80020b4:	881b      	ldrh	r3, [r3, #0]
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	b21b      	sxth	r3, r3
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7ff fbd8 	bl	8001870 <myLCD_printNum>
			stateku = siap;
 80020c0:	4b11      	ldr	r3, [pc, #68]	; (8002108 <Task_run+0x824>)
 80020c2:	2204      	movs	r2, #4
 80020c4:	701a      	strb	r2, [r3, #0]
		}
	}break;
 80020c6:	e00d      	b.n	80020e4 <Task_run+0x800>
	}break;
 80020c8:	bf00      	nop
 80020ca:	e00c      	b.n	80020e6 <Task_run+0x802>
	}break;
 80020cc:	bf00      	nop
 80020ce:	e00a      	b.n	80020e6 <Task_run+0x802>
	}break;
 80020d0:	bf00      	nop
 80020d2:	e008      	b.n	80020e6 <Task_run+0x802>
	}break;
 80020d4:	bf00      	nop
 80020d6:	e006      	b.n	80020e6 <Task_run+0x802>
	}break;
 80020d8:	bf00      	nop
 80020da:	e004      	b.n	80020e6 <Task_run+0x802>
	}break;
 80020dc:	bf00      	nop
 80020de:	e002      	b.n	80020e6 <Task_run+0x802>
	}break;
 80020e0:	bf00      	nop
 80020e2:	e000      	b.n	80020e6 <Task_run+0x802>
	}break;
 80020e4:	bf00      	nop
	}
}
 80020e6:	bf00      	nop
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	20000096 	.word	0x20000096
 80020f0:	40010800 	.word	0x40010800
 80020f4:	40010c00 	.word	0x40010c00
 80020f8:	0800308c 	.word	0x0800308c
 80020fc:	08003040 	.word	0x08003040
 8002100:	080030a4 	.word	0x080030a4
 8002104:	20000094 	.word	0x20000094
 8002108:	200000a8 	.word	0x200000a8
 800210c:	08003020 	.word	0x08003020
 8002110:	080030b4 	.word	0x080030b4
 8002114:	08003048 	.word	0x08003048
 8002118:	08003058 	.word	0x08003058
 800211c:	08003014 	.word	0x08003014

08002120 <PB_Process>:

/* ---------------------------------------------------------------------------------------- */
_Bool PB_Process(void){
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
	_Bool flagDetect=0;
 8002126:	2300      	movs	r3, #0
 8002128:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(PB_PROCESS_GPIO_Port, PB_PROCESS_Pin)==0)
 800212a:	2108      	movs	r1, #8
 800212c:	4812      	ldr	r0, [pc, #72]	; (8002178 <PB_Process+0x58>)
 800212e:	f7fe faf9 	bl	8000724 <HAL_GPIO_ReadPin>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d107      	bne.n	8002148 <PB_Process+0x28>
		debounce1 = debounce1<<1;
 8002138:	4b10      	ldr	r3, [pc, #64]	; (800217c <PB_Process+0x5c>)
 800213a:	881b      	ldrh	r3, [r3, #0]
 800213c:	b29b      	uxth	r3, r3
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	b29a      	uxth	r2, r3
 8002142:	4b0e      	ldr	r3, [pc, #56]	; (800217c <PB_Process+0x5c>)
 8002144:	801a      	strh	r2, [r3, #0]
 8002146:	e00a      	b.n	800215e <PB_Process+0x3e>
	else
		debounce1 = (debounce1<<1)|1;
 8002148:	4b0c      	ldr	r3, [pc, #48]	; (800217c <PB_Process+0x5c>)
 800214a:	881b      	ldrh	r3, [r3, #0]
 800214c:	b29b      	uxth	r3, r3
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	b21b      	sxth	r3, r3
 8002152:	f043 0301 	orr.w	r3, r3, #1
 8002156:	b21b      	sxth	r3, r3
 8002158:	b29a      	uxth	r2, r3
 800215a:	4b08      	ldr	r3, [pc, #32]	; (800217c <PB_Process+0x5c>)
 800215c:	801a      	strh	r2, [r3, #0]
	if(debounce1==3)
 800215e:	4b07      	ldr	r3, [pc, #28]	; (800217c <PB_Process+0x5c>)
 8002160:	881b      	ldrh	r3, [r3, #0]
 8002162:	b29b      	uxth	r3, r3
 8002164:	2b03      	cmp	r3, #3
 8002166:	d101      	bne.n	800216c <PB_Process+0x4c>
		flagDetect=1;
 8002168:	2301      	movs	r3, #1
 800216a:	71fb      	strb	r3, [r7, #7]
	return flagDetect;
 800216c:	79fb      	ldrb	r3, [r7, #7]
}
 800216e:	4618      	mov	r0, r3
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	40010800 	.word	0x40010800
 800217c:	20000006 	.word	0x20000006

08002180 <PB_Cancel>:

_Bool PB_Cancel(void){
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
	_Bool flagDetect=0;
 8002186:	2300      	movs	r3, #0
 8002188:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(PB_CANCEL_GPIO_Port, PB_CANCEL_Pin)==0)
 800218a:	2104      	movs	r1, #4
 800218c:	4812      	ldr	r0, [pc, #72]	; (80021d8 <PB_Cancel+0x58>)
 800218e:	f7fe fac9 	bl	8000724 <HAL_GPIO_ReadPin>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d107      	bne.n	80021a8 <PB_Cancel+0x28>
		debounce2 = debounce2<<1;
 8002198:	4b10      	ldr	r3, [pc, #64]	; (80021dc <PB_Cancel+0x5c>)
 800219a:	881b      	ldrh	r3, [r3, #0]
 800219c:	b29b      	uxth	r3, r3
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	b29a      	uxth	r2, r3
 80021a2:	4b0e      	ldr	r3, [pc, #56]	; (80021dc <PB_Cancel+0x5c>)
 80021a4:	801a      	strh	r2, [r3, #0]
 80021a6:	e00a      	b.n	80021be <PB_Cancel+0x3e>
	else
		debounce2 = (debounce2<<1)|1;
 80021a8:	4b0c      	ldr	r3, [pc, #48]	; (80021dc <PB_Cancel+0x5c>)
 80021aa:	881b      	ldrh	r3, [r3, #0]
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	b21b      	sxth	r3, r3
 80021b2:	f043 0301 	orr.w	r3, r3, #1
 80021b6:	b21b      	sxth	r3, r3
 80021b8:	b29a      	uxth	r2, r3
 80021ba:	4b08      	ldr	r3, [pc, #32]	; (80021dc <PB_Cancel+0x5c>)
 80021bc:	801a      	strh	r2, [r3, #0]
	if(debounce2==3)
 80021be:	4b07      	ldr	r3, [pc, #28]	; (80021dc <PB_Cancel+0x5c>)
 80021c0:	881b      	ldrh	r3, [r3, #0]
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	2b03      	cmp	r3, #3
 80021c6:	d101      	bne.n	80021cc <PB_Cancel+0x4c>
		flagDetect=1;
 80021c8:	2301      	movs	r3, #1
 80021ca:	71fb      	strb	r3, [r7, #7]
	return flagDetect;
 80021cc:	79fb      	ldrb	r3, [r7, #7]
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40010800 	.word	0x40010800
 80021dc:	20000008 	.word	0x20000008

080021e0 <PB_500>:

_Bool PB_500(void){
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
	_Bool flagDetect=0;
 80021e6:	2300      	movs	r3, #0
 80021e8:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(PB_500_GPIO_Port, PB_500_Pin)==0)
 80021ea:	2102      	movs	r1, #2
 80021ec:	4812      	ldr	r0, [pc, #72]	; (8002238 <PB_500+0x58>)
 80021ee:	f7fe fa99 	bl	8000724 <HAL_GPIO_ReadPin>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d107      	bne.n	8002208 <PB_500+0x28>
		debounce3 = debounce3<<1;
 80021f8:	4b10      	ldr	r3, [pc, #64]	; (800223c <PB_500+0x5c>)
 80021fa:	881b      	ldrh	r3, [r3, #0]
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	b29a      	uxth	r2, r3
 8002202:	4b0e      	ldr	r3, [pc, #56]	; (800223c <PB_500+0x5c>)
 8002204:	801a      	strh	r2, [r3, #0]
 8002206:	e00a      	b.n	800221e <PB_500+0x3e>
	else
		debounce3 = (debounce3<<1)|1;
 8002208:	4b0c      	ldr	r3, [pc, #48]	; (800223c <PB_500+0x5c>)
 800220a:	881b      	ldrh	r3, [r3, #0]
 800220c:	b29b      	uxth	r3, r3
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	b21b      	sxth	r3, r3
 8002212:	f043 0301 	orr.w	r3, r3, #1
 8002216:	b21b      	sxth	r3, r3
 8002218:	b29a      	uxth	r2, r3
 800221a:	4b08      	ldr	r3, [pc, #32]	; (800223c <PB_500+0x5c>)
 800221c:	801a      	strh	r2, [r3, #0]
	if(debounce3==3)
 800221e:	4b07      	ldr	r3, [pc, #28]	; (800223c <PB_500+0x5c>)
 8002220:	881b      	ldrh	r3, [r3, #0]
 8002222:	b29b      	uxth	r3, r3
 8002224:	2b03      	cmp	r3, #3
 8002226:	d101      	bne.n	800222c <PB_500+0x4c>
		flagDetect=1;
 8002228:	2301      	movs	r3, #1
 800222a:	71fb      	strb	r3, [r7, #7]
	return flagDetect;
 800222c:	79fb      	ldrb	r3, [r7, #7]
}
 800222e:	4618      	mov	r0, r3
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	40010800 	.word	0x40010800
 800223c:	2000000a 	.word	0x2000000a

08002240 <PB_1000>:

_Bool PB_1000(void){
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
	_Bool flagDetect=0;
 8002246:	2300      	movs	r3, #0
 8002248:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(PB_1000_GPIO_Port, PB_1000_Pin)==0)
 800224a:	2101      	movs	r1, #1
 800224c:	4812      	ldr	r0, [pc, #72]	; (8002298 <PB_1000+0x58>)
 800224e:	f7fe fa69 	bl	8000724 <HAL_GPIO_ReadPin>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d107      	bne.n	8002268 <PB_1000+0x28>
		debounce4 = debounce4<<1;
 8002258:	4b10      	ldr	r3, [pc, #64]	; (800229c <PB_1000+0x5c>)
 800225a:	881b      	ldrh	r3, [r3, #0]
 800225c:	b29b      	uxth	r3, r3
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	b29a      	uxth	r2, r3
 8002262:	4b0e      	ldr	r3, [pc, #56]	; (800229c <PB_1000+0x5c>)
 8002264:	801a      	strh	r2, [r3, #0]
 8002266:	e00a      	b.n	800227e <PB_1000+0x3e>
	else
		debounce4 = (debounce4<<1)|1;
 8002268:	4b0c      	ldr	r3, [pc, #48]	; (800229c <PB_1000+0x5c>)
 800226a:	881b      	ldrh	r3, [r3, #0]
 800226c:	b29b      	uxth	r3, r3
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	b21b      	sxth	r3, r3
 8002272:	f043 0301 	orr.w	r3, r3, #1
 8002276:	b21b      	sxth	r3, r3
 8002278:	b29a      	uxth	r2, r3
 800227a:	4b08      	ldr	r3, [pc, #32]	; (800229c <PB_1000+0x5c>)
 800227c:	801a      	strh	r2, [r3, #0]
	if(debounce4==3)
 800227e:	4b07      	ldr	r3, [pc, #28]	; (800229c <PB_1000+0x5c>)
 8002280:	881b      	ldrh	r3, [r3, #0]
 8002282:	b29b      	uxth	r3, r3
 8002284:	2b03      	cmp	r3, #3
 8002286:	d101      	bne.n	800228c <PB_1000+0x4c>
		flagDetect=1;
 8002288:	2301      	movs	r3, #1
 800228a:	71fb      	strb	r3, [r7, #7]
	return flagDetect;
 800228c:	79fb      	ldrb	r3, [r7, #7]
}
 800228e:	4618      	mov	r0, r3
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	40010800 	.word	0x40010800
 800229c:	2000000c 	.word	0x2000000c

080022a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022a4:	f7fd ff52 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022a8:	f000 f80c 	bl	80022c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022ac:	f000 f89c 	bl	80023e8 <MX_GPIO_Init>
  MX_TIM2_Init();
 80022b0:	f000 f84e 	bl	8002350 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */
  Task_init();
 80022b4:	f7ff fafc 	bl	80018b0 <Task_init>
  HAL_TIM_Base_Start_IT(&htim2);
 80022b8:	4801      	ldr	r0, [pc, #4]	; (80022c0 <main+0x20>)
 80022ba:	f7fe fe78 	bl	8000fae <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80022be:	e7fe      	b.n	80022be <main+0x1e>
 80022c0:	200000ac 	.word	0x200000ac

080022c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b090      	sub	sp, #64	; 0x40
 80022c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022ca:	f107 0318 	add.w	r3, r7, #24
 80022ce:	2228      	movs	r2, #40	; 0x28
 80022d0:	2100      	movs	r1, #0
 80022d2:	4618      	mov	r0, r3
 80022d4:	f000 fa36 	bl	8002744 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022d8:	1d3b      	adds	r3, r7, #4
 80022da:	2200      	movs	r2, #0
 80022dc:	601a      	str	r2, [r3, #0]
 80022de:	605a      	str	r2, [r3, #4]
 80022e0:	609a      	str	r2, [r3, #8]
 80022e2:	60da      	str	r2, [r3, #12]
 80022e4:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80022e6:	2301      	movs	r3, #1
 80022e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80022ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80022f0:	2300      	movs	r3, #0
 80022f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022f4:	2301      	movs	r3, #1
 80022f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022f8:	2302      	movs	r3, #2
 80022fa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002300:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002302:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002306:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002308:	f107 0318 	add.w	r3, r7, #24
 800230c:	4618      	mov	r0, r3
 800230e:	f7fe fa39 	bl	8000784 <HAL_RCC_OscConfig>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002318:	f000 f8d2 	bl	80024c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800231c:	230f      	movs	r3, #15
 800231e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002320:	2302      	movs	r3, #2
 8002322:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002324:	2300      	movs	r3, #0
 8002326:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002328:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800232c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800232e:	2300      	movs	r3, #0
 8002330:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002332:	1d3b      	adds	r3, r7, #4
 8002334:	2102      	movs	r1, #2
 8002336:	4618      	mov	r0, r3
 8002338:	f7fe fca4 	bl	8000c84 <HAL_RCC_ClockConfig>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002342:	f000 f8bd 	bl	80024c0 <Error_Handler>
  }
}
 8002346:	bf00      	nop
 8002348:	3740      	adds	r7, #64	; 0x40
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
	...

08002350 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002356:	f107 0308 	add.w	r3, r7, #8
 800235a:	2200      	movs	r2, #0
 800235c:	601a      	str	r2, [r3, #0]
 800235e:	605a      	str	r2, [r3, #4]
 8002360:	609a      	str	r2, [r3, #8]
 8002362:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002364:	463b      	mov	r3, r7
 8002366:	2200      	movs	r2, #0
 8002368:	601a      	str	r2, [r3, #0]
 800236a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800236c:	4b1d      	ldr	r3, [pc, #116]	; (80023e4 <MX_TIM2_Init+0x94>)
 800236e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002372:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35999;
 8002374:	4b1b      	ldr	r3, [pc, #108]	; (80023e4 <MX_TIM2_Init+0x94>)
 8002376:	f648 429f 	movw	r2, #35999	; 0x8c9f
 800237a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800237c:	4b19      	ldr	r3, [pc, #100]	; (80023e4 <MX_TIM2_Init+0x94>)
 800237e:	2200      	movs	r2, #0
 8002380:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3;
 8002382:	4b18      	ldr	r3, [pc, #96]	; (80023e4 <MX_TIM2_Init+0x94>)
 8002384:	2203      	movs	r2, #3
 8002386:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002388:	4b16      	ldr	r3, [pc, #88]	; (80023e4 <MX_TIM2_Init+0x94>)
 800238a:	2200      	movs	r2, #0
 800238c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800238e:	4b15      	ldr	r3, [pc, #84]	; (80023e4 <MX_TIM2_Init+0x94>)
 8002390:	2200      	movs	r2, #0
 8002392:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002394:	4813      	ldr	r0, [pc, #76]	; (80023e4 <MX_TIM2_Init+0x94>)
 8002396:	f7fe fddf 	bl	8000f58 <HAL_TIM_Base_Init>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80023a0:	f000 f88e 	bl	80024c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80023aa:	f107 0308 	add.w	r3, r7, #8
 80023ae:	4619      	mov	r1, r3
 80023b0:	480c      	ldr	r0, [pc, #48]	; (80023e4 <MX_TIM2_Init+0x94>)
 80023b2:	f7fe ff27 	bl	8001204 <HAL_TIM_ConfigClockSource>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80023bc:	f000 f880 	bl	80024c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023c0:	2300      	movs	r3, #0
 80023c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023c4:	2300      	movs	r3, #0
 80023c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80023c8:	463b      	mov	r3, r7
 80023ca:	4619      	mov	r1, r3
 80023cc:	4805      	ldr	r0, [pc, #20]	; (80023e4 <MX_TIM2_Init+0x94>)
 80023ce:	f7ff f8f5 	bl	80015bc <HAL_TIMEx_MasterConfigSynchronization>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80023d8:	f000 f872 	bl	80024c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80023dc:	bf00      	nop
 80023de:	3718      	adds	r7, #24
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	200000ac 	.word	0x200000ac

080023e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b088      	sub	sp, #32
 80023ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ee:	f107 0310 	add.w	r3, r7, #16
 80023f2:	2200      	movs	r2, #0
 80023f4:	601a      	str	r2, [r3, #0]
 80023f6:	605a      	str	r2, [r3, #4]
 80023f8:	609a      	str	r2, [r3, #8]
 80023fa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023fc:	4b2d      	ldr	r3, [pc, #180]	; (80024b4 <MX_GPIO_Init+0xcc>)
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	4a2c      	ldr	r2, [pc, #176]	; (80024b4 <MX_GPIO_Init+0xcc>)
 8002402:	f043 0320 	orr.w	r3, r3, #32
 8002406:	6193      	str	r3, [r2, #24]
 8002408:	4b2a      	ldr	r3, [pc, #168]	; (80024b4 <MX_GPIO_Init+0xcc>)
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	f003 0320 	and.w	r3, r3, #32
 8002410:	60fb      	str	r3, [r7, #12]
 8002412:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002414:	4b27      	ldr	r3, [pc, #156]	; (80024b4 <MX_GPIO_Init+0xcc>)
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	4a26      	ldr	r2, [pc, #152]	; (80024b4 <MX_GPIO_Init+0xcc>)
 800241a:	f043 0304 	orr.w	r3, r3, #4
 800241e:	6193      	str	r3, [r2, #24]
 8002420:	4b24      	ldr	r3, [pc, #144]	; (80024b4 <MX_GPIO_Init+0xcc>)
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	f003 0304 	and.w	r3, r3, #4
 8002428:	60bb      	str	r3, [r7, #8]
 800242a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800242c:	4b21      	ldr	r3, [pc, #132]	; (80024b4 <MX_GPIO_Init+0xcc>)
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	4a20      	ldr	r2, [pc, #128]	; (80024b4 <MX_GPIO_Init+0xcc>)
 8002432:	f043 0308 	orr.w	r3, r3, #8
 8002436:	6193      	str	r3, [r2, #24]
 8002438:	4b1e      	ldr	r3, [pc, #120]	; (80024b4 <MX_GPIO_Init+0xcc>)
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	f003 0308 	and.w	r3, r3, #8
 8002440:	607b      	str	r3, [r7, #4]
 8002442:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_1000_Pin|LED_500_Pin|LED_DROP_Pin, GPIO_PIN_RESET);
 8002444:	2200      	movs	r2, #0
 8002446:	2170      	movs	r1, #112	; 0x70
 8002448:	481b      	ldr	r0, [pc, #108]	; (80024b8 <MX_GPIO_Init+0xd0>)
 800244a:	f7fe f982 	bl	8000752 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BUZZER_Pin|LCD_D7_Pin|LCD_D6_Pin|LCD_D5_Pin 
 800244e:	2200      	movs	r2, #0
 8002450:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 8002454:	4819      	ldr	r0, [pc, #100]	; (80024bc <MX_GPIO_Init+0xd4>)
 8002456:	f7fe f97c 	bl	8000752 <HAL_GPIO_WritePin>
                          |LCD_D4_Pin|LCD_E_Pin|LCD_RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB_1000_Pin PB_500_Pin PB_CANCEL_Pin PB_PROCESS_Pin */
  GPIO_InitStruct.Pin = PB_1000_Pin|PB_500_Pin|PB_CANCEL_Pin|PB_PROCESS_Pin;
 800245a:	230f      	movs	r3, #15
 800245c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800245e:	2300      	movs	r3, #0
 8002460:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002462:	2301      	movs	r3, #1
 8002464:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002466:	f107 0310 	add.w	r3, r7, #16
 800246a:	4619      	mov	r1, r3
 800246c:	4812      	ldr	r0, [pc, #72]	; (80024b8 <MX_GPIO_Init+0xd0>)
 800246e:	f7fd ffff 	bl	8000470 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_1000_Pin LED_500_Pin LED_DROP_Pin */
  GPIO_InitStruct.Pin = LED_1000_Pin|LED_500_Pin|LED_DROP_Pin;
 8002472:	2370      	movs	r3, #112	; 0x70
 8002474:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002476:	2301      	movs	r3, #1
 8002478:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247a:	2300      	movs	r3, #0
 800247c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800247e:	2302      	movs	r3, #2
 8002480:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002482:	f107 0310 	add.w	r3, r7, #16
 8002486:	4619      	mov	r1, r3
 8002488:	480b      	ldr	r0, [pc, #44]	; (80024b8 <MX_GPIO_Init+0xd0>)
 800248a:	f7fd fff1 	bl	8000470 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZER_Pin LCD_D7_Pin LCD_D6_Pin LCD_D5_Pin 
                           LCD_D4_Pin LCD_E_Pin LCD_RS_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin|LCD_D7_Pin|LCD_D6_Pin|LCD_D5_Pin 
 800248e:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 8002492:	613b      	str	r3, [r7, #16]
                          |LCD_D4_Pin|LCD_E_Pin|LCD_RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002494:	2301      	movs	r3, #1
 8002496:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002498:	2300      	movs	r3, #0
 800249a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800249c:	2302      	movs	r3, #2
 800249e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024a0:	f107 0310 	add.w	r3, r7, #16
 80024a4:	4619      	mov	r1, r3
 80024a6:	4805      	ldr	r0, [pc, #20]	; (80024bc <MX_GPIO_Init+0xd4>)
 80024a8:	f7fd ffe2 	bl	8000470 <HAL_GPIO_Init>

}
 80024ac:	bf00      	nop
 80024ae:	3720      	adds	r7, #32
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	40021000 	.word	0x40021000
 80024b8:	40010800 	.word	0x40010800
 80024bc:	40010c00 	.word	0x40010c00

080024c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80024c4:	bf00      	nop
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bc80      	pop	{r7}
 80024ca:	4770      	bx	lr

080024cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80024d2:	4b15      	ldr	r3, [pc, #84]	; (8002528 <HAL_MspInit+0x5c>)
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	4a14      	ldr	r2, [pc, #80]	; (8002528 <HAL_MspInit+0x5c>)
 80024d8:	f043 0301 	orr.w	r3, r3, #1
 80024dc:	6193      	str	r3, [r2, #24]
 80024de:	4b12      	ldr	r3, [pc, #72]	; (8002528 <HAL_MspInit+0x5c>)
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	60bb      	str	r3, [r7, #8]
 80024e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024ea:	4b0f      	ldr	r3, [pc, #60]	; (8002528 <HAL_MspInit+0x5c>)
 80024ec:	69db      	ldr	r3, [r3, #28]
 80024ee:	4a0e      	ldr	r2, [pc, #56]	; (8002528 <HAL_MspInit+0x5c>)
 80024f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024f4:	61d3      	str	r3, [r2, #28]
 80024f6:	4b0c      	ldr	r3, [pc, #48]	; (8002528 <HAL_MspInit+0x5c>)
 80024f8:	69db      	ldr	r3, [r3, #28]
 80024fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024fe:	607b      	str	r3, [r7, #4]
 8002500:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002502:	4b0a      	ldr	r3, [pc, #40]	; (800252c <HAL_MspInit+0x60>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	60fb      	str	r3, [r7, #12]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800250e:	60fb      	str	r3, [r7, #12]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	4a04      	ldr	r2, [pc, #16]	; (800252c <HAL_MspInit+0x60>)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800251e:	bf00      	nop
 8002520:	3714      	adds	r7, #20
 8002522:	46bd      	mov	sp, r7
 8002524:	bc80      	pop	{r7}
 8002526:	4770      	bx	lr
 8002528:	40021000 	.word	0x40021000
 800252c:	40010000 	.word	0x40010000

08002530 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002540:	d113      	bne.n	800256a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002542:	4b0c      	ldr	r3, [pc, #48]	; (8002574 <HAL_TIM_Base_MspInit+0x44>)
 8002544:	69db      	ldr	r3, [r3, #28]
 8002546:	4a0b      	ldr	r2, [pc, #44]	; (8002574 <HAL_TIM_Base_MspInit+0x44>)
 8002548:	f043 0301 	orr.w	r3, r3, #1
 800254c:	61d3      	str	r3, [r2, #28]
 800254e:	4b09      	ldr	r3, [pc, #36]	; (8002574 <HAL_TIM_Base_MspInit+0x44>)
 8002550:	69db      	ldr	r3, [r3, #28]
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	60fb      	str	r3, [r7, #12]
 8002558:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800255a:	2200      	movs	r2, #0
 800255c:	2100      	movs	r1, #0
 800255e:	201c      	movs	r0, #28
 8002560:	f7fd ff4f 	bl	8000402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002564:	201c      	movs	r0, #28
 8002566:	f7fd ff68 	bl	800043a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800256a:	bf00      	nop
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	40021000 	.word	0x40021000

08002578 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800257c:	bf00      	nop
 800257e:	46bd      	mov	sp, r7
 8002580:	bc80      	pop	{r7}
 8002582:	4770      	bx	lr

08002584 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002588:	e7fe      	b.n	8002588 <HardFault_Handler+0x4>

0800258a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800258a:	b480      	push	{r7}
 800258c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800258e:	e7fe      	b.n	800258e <MemManage_Handler+0x4>

08002590 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002594:	e7fe      	b.n	8002594 <BusFault_Handler+0x4>

08002596 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002596:	b480      	push	{r7}
 8002598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800259a:	e7fe      	b.n	800259a <UsageFault_Handler+0x4>

0800259c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025a0:	bf00      	nop
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bc80      	pop	{r7}
 80025a6:	4770      	bx	lr

080025a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025ac:	bf00      	nop
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bc80      	pop	{r7}
 80025b2:	4770      	bx	lr

080025b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025b8:	bf00      	nop
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bc80      	pop	{r7}
 80025be:	4770      	bx	lr

080025c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025c4:	f7fd fe08 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025c8:	bf00      	nop
 80025ca:	bd80      	pop	{r7, pc}

080025cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80025d0:	4803      	ldr	r0, [pc, #12]	; (80025e0 <TIM2_IRQHandler+0x14>)
 80025d2:	f7fe fd0f 	bl	8000ff4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  Task_run();
 80025d6:	f7ff f985 	bl	80018e4 <Task_run>
  /* USER CODE END TIM2_IRQn 1 */
}
 80025da:	bf00      	nop
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	200000ac 	.word	0x200000ac

080025e4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80025ec:	4b11      	ldr	r3, [pc, #68]	; (8002634 <_sbrk+0x50>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d102      	bne.n	80025fa <_sbrk+0x16>
		heap_end = &end;
 80025f4:	4b0f      	ldr	r3, [pc, #60]	; (8002634 <_sbrk+0x50>)
 80025f6:	4a10      	ldr	r2, [pc, #64]	; (8002638 <_sbrk+0x54>)
 80025f8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80025fa:	4b0e      	ldr	r3, [pc, #56]	; (8002634 <_sbrk+0x50>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002600:	4b0c      	ldr	r3, [pc, #48]	; (8002634 <_sbrk+0x50>)
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4413      	add	r3, r2
 8002608:	466a      	mov	r2, sp
 800260a:	4293      	cmp	r3, r2
 800260c:	d907      	bls.n	800261e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800260e:	f000 f86f 	bl	80026f0 <__errno>
 8002612:	4602      	mov	r2, r0
 8002614:	230c      	movs	r3, #12
 8002616:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002618:	f04f 33ff 	mov.w	r3, #4294967295
 800261c:	e006      	b.n	800262c <_sbrk+0x48>
	}

	heap_end += incr;
 800261e:	4b05      	ldr	r3, [pc, #20]	; (8002634 <_sbrk+0x50>)
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4413      	add	r3, r2
 8002626:	4a03      	ldr	r2, [pc, #12]	; (8002634 <_sbrk+0x50>)
 8002628:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800262a:	68fb      	ldr	r3, [r7, #12]
}
 800262c:	4618      	mov	r0, r3
 800262e:	3710      	adds	r7, #16
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	20000098 	.word	0x20000098
 8002638:	200000f0 	.word	0x200000f0

0800263c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002640:	4b15      	ldr	r3, [pc, #84]	; (8002698 <SystemInit+0x5c>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a14      	ldr	r2, [pc, #80]	; (8002698 <SystemInit+0x5c>)
 8002646:	f043 0301 	orr.w	r3, r3, #1
 800264a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800264c:	4b12      	ldr	r3, [pc, #72]	; (8002698 <SystemInit+0x5c>)
 800264e:	685a      	ldr	r2, [r3, #4]
 8002650:	4911      	ldr	r1, [pc, #68]	; (8002698 <SystemInit+0x5c>)
 8002652:	4b12      	ldr	r3, [pc, #72]	; (800269c <SystemInit+0x60>)
 8002654:	4013      	ands	r3, r2
 8002656:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002658:	4b0f      	ldr	r3, [pc, #60]	; (8002698 <SystemInit+0x5c>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a0e      	ldr	r2, [pc, #56]	; (8002698 <SystemInit+0x5c>)
 800265e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002662:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002666:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002668:	4b0b      	ldr	r3, [pc, #44]	; (8002698 <SystemInit+0x5c>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a0a      	ldr	r2, [pc, #40]	; (8002698 <SystemInit+0x5c>)
 800266e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002672:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002674:	4b08      	ldr	r3, [pc, #32]	; (8002698 <SystemInit+0x5c>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	4a07      	ldr	r2, [pc, #28]	; (8002698 <SystemInit+0x5c>)
 800267a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800267e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002680:	4b05      	ldr	r3, [pc, #20]	; (8002698 <SystemInit+0x5c>)
 8002682:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002686:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002688:	4b05      	ldr	r3, [pc, #20]	; (80026a0 <SystemInit+0x64>)
 800268a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800268e:	609a      	str	r2, [r3, #8]
#endif 
}
 8002690:	bf00      	nop
 8002692:	46bd      	mov	sp, r7
 8002694:	bc80      	pop	{r7}
 8002696:	4770      	bx	lr
 8002698:	40021000 	.word	0x40021000
 800269c:	f8ff0000 	.word	0xf8ff0000
 80026a0:	e000ed00 	.word	0xe000ed00

080026a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80026a4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80026a6:	e003      	b.n	80026b0 <LoopCopyDataInit>

080026a8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80026a8:	4b0b      	ldr	r3, [pc, #44]	; (80026d8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80026aa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80026ac:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80026ae:	3104      	adds	r1, #4

080026b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80026b0:	480a      	ldr	r0, [pc, #40]	; (80026dc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80026b2:	4b0b      	ldr	r3, [pc, #44]	; (80026e0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80026b4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80026b6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80026b8:	d3f6      	bcc.n	80026a8 <CopyDataInit>
  ldr r2, =_sbss
 80026ba:	4a0a      	ldr	r2, [pc, #40]	; (80026e4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80026bc:	e002      	b.n	80026c4 <LoopFillZerobss>

080026be <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80026be:	2300      	movs	r3, #0
  str r3, [r2], #4
 80026c0:	f842 3b04 	str.w	r3, [r2], #4

080026c4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80026c4:	4b08      	ldr	r3, [pc, #32]	; (80026e8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80026c6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80026c8:	d3f9      	bcc.n	80026be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80026ca:	f7ff ffb7 	bl	800263c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026ce:	f000 f815 	bl	80026fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80026d2:	f7ff fde5 	bl	80022a0 <main>
  bx lr
 80026d6:	4770      	bx	lr
  ldr r3, =_sidata
 80026d8:	08003110 	.word	0x08003110
  ldr r0, =_sdata
 80026dc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80026e0:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 80026e4:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 80026e8:	200000f0 	.word	0x200000f0

080026ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80026ec:	e7fe      	b.n	80026ec <ADC1_2_IRQHandler>
	...

080026f0 <__errno>:
 80026f0:	4b01      	ldr	r3, [pc, #4]	; (80026f8 <__errno+0x8>)
 80026f2:	6818      	ldr	r0, [r3, #0]
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	20000014 	.word	0x20000014

080026fc <__libc_init_array>:
 80026fc:	b570      	push	{r4, r5, r6, lr}
 80026fe:	2500      	movs	r5, #0
 8002700:	4e0c      	ldr	r6, [pc, #48]	; (8002734 <__libc_init_array+0x38>)
 8002702:	4c0d      	ldr	r4, [pc, #52]	; (8002738 <__libc_init_array+0x3c>)
 8002704:	1ba4      	subs	r4, r4, r6
 8002706:	10a4      	asrs	r4, r4, #2
 8002708:	42a5      	cmp	r5, r4
 800270a:	d109      	bne.n	8002720 <__libc_init_array+0x24>
 800270c:	f000 fc34 	bl	8002f78 <_init>
 8002710:	2500      	movs	r5, #0
 8002712:	4e0a      	ldr	r6, [pc, #40]	; (800273c <__libc_init_array+0x40>)
 8002714:	4c0a      	ldr	r4, [pc, #40]	; (8002740 <__libc_init_array+0x44>)
 8002716:	1ba4      	subs	r4, r4, r6
 8002718:	10a4      	asrs	r4, r4, #2
 800271a:	42a5      	cmp	r5, r4
 800271c:	d105      	bne.n	800272a <__libc_init_array+0x2e>
 800271e:	bd70      	pop	{r4, r5, r6, pc}
 8002720:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002724:	4798      	blx	r3
 8002726:	3501      	adds	r5, #1
 8002728:	e7ee      	b.n	8002708 <__libc_init_array+0xc>
 800272a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800272e:	4798      	blx	r3
 8002730:	3501      	adds	r5, #1
 8002732:	e7f2      	b.n	800271a <__libc_init_array+0x1e>
 8002734:	08003108 	.word	0x08003108
 8002738:	08003108 	.word	0x08003108
 800273c:	08003108 	.word	0x08003108
 8002740:	0800310c 	.word	0x0800310c

08002744 <memset>:
 8002744:	4603      	mov	r3, r0
 8002746:	4402      	add	r2, r0
 8002748:	4293      	cmp	r3, r2
 800274a:	d100      	bne.n	800274e <memset+0xa>
 800274c:	4770      	bx	lr
 800274e:	f803 1b01 	strb.w	r1, [r3], #1
 8002752:	e7f9      	b.n	8002748 <memset+0x4>

08002754 <siprintf>:
 8002754:	b40e      	push	{r1, r2, r3}
 8002756:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800275a:	b500      	push	{lr}
 800275c:	b09c      	sub	sp, #112	; 0x70
 800275e:	ab1d      	add	r3, sp, #116	; 0x74
 8002760:	9002      	str	r0, [sp, #8]
 8002762:	9006      	str	r0, [sp, #24]
 8002764:	9107      	str	r1, [sp, #28]
 8002766:	9104      	str	r1, [sp, #16]
 8002768:	4808      	ldr	r0, [pc, #32]	; (800278c <siprintf+0x38>)
 800276a:	4909      	ldr	r1, [pc, #36]	; (8002790 <siprintf+0x3c>)
 800276c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002770:	9105      	str	r1, [sp, #20]
 8002772:	6800      	ldr	r0, [r0, #0]
 8002774:	a902      	add	r1, sp, #8
 8002776:	9301      	str	r3, [sp, #4]
 8002778:	f000 f866 	bl	8002848 <_svfiprintf_r>
 800277c:	2200      	movs	r2, #0
 800277e:	9b02      	ldr	r3, [sp, #8]
 8002780:	701a      	strb	r2, [r3, #0]
 8002782:	b01c      	add	sp, #112	; 0x70
 8002784:	f85d eb04 	ldr.w	lr, [sp], #4
 8002788:	b003      	add	sp, #12
 800278a:	4770      	bx	lr
 800278c:	20000014 	.word	0x20000014
 8002790:	ffff0208 	.word	0xffff0208

08002794 <__ssputs_r>:
 8002794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002798:	688e      	ldr	r6, [r1, #8]
 800279a:	4682      	mov	sl, r0
 800279c:	429e      	cmp	r6, r3
 800279e:	460c      	mov	r4, r1
 80027a0:	4690      	mov	r8, r2
 80027a2:	4699      	mov	r9, r3
 80027a4:	d837      	bhi.n	8002816 <__ssputs_r+0x82>
 80027a6:	898a      	ldrh	r2, [r1, #12]
 80027a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80027ac:	d031      	beq.n	8002812 <__ssputs_r+0x7e>
 80027ae:	2302      	movs	r3, #2
 80027b0:	6825      	ldr	r5, [r4, #0]
 80027b2:	6909      	ldr	r1, [r1, #16]
 80027b4:	1a6f      	subs	r7, r5, r1
 80027b6:	6965      	ldr	r5, [r4, #20]
 80027b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80027bc:	fb95 f5f3 	sdiv	r5, r5, r3
 80027c0:	f109 0301 	add.w	r3, r9, #1
 80027c4:	443b      	add	r3, r7
 80027c6:	429d      	cmp	r5, r3
 80027c8:	bf38      	it	cc
 80027ca:	461d      	movcc	r5, r3
 80027cc:	0553      	lsls	r3, r2, #21
 80027ce:	d530      	bpl.n	8002832 <__ssputs_r+0x9e>
 80027d0:	4629      	mov	r1, r5
 80027d2:	f000 fb37 	bl	8002e44 <_malloc_r>
 80027d6:	4606      	mov	r6, r0
 80027d8:	b950      	cbnz	r0, 80027f0 <__ssputs_r+0x5c>
 80027da:	230c      	movs	r3, #12
 80027dc:	f04f 30ff 	mov.w	r0, #4294967295
 80027e0:	f8ca 3000 	str.w	r3, [sl]
 80027e4:	89a3      	ldrh	r3, [r4, #12]
 80027e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027ea:	81a3      	strh	r3, [r4, #12]
 80027ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027f0:	463a      	mov	r2, r7
 80027f2:	6921      	ldr	r1, [r4, #16]
 80027f4:	f000 fab6 	bl	8002d64 <memcpy>
 80027f8:	89a3      	ldrh	r3, [r4, #12]
 80027fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80027fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002802:	81a3      	strh	r3, [r4, #12]
 8002804:	6126      	str	r6, [r4, #16]
 8002806:	443e      	add	r6, r7
 8002808:	6026      	str	r6, [r4, #0]
 800280a:	464e      	mov	r6, r9
 800280c:	6165      	str	r5, [r4, #20]
 800280e:	1bed      	subs	r5, r5, r7
 8002810:	60a5      	str	r5, [r4, #8]
 8002812:	454e      	cmp	r6, r9
 8002814:	d900      	bls.n	8002818 <__ssputs_r+0x84>
 8002816:	464e      	mov	r6, r9
 8002818:	4632      	mov	r2, r6
 800281a:	4641      	mov	r1, r8
 800281c:	6820      	ldr	r0, [r4, #0]
 800281e:	f000 faac 	bl	8002d7a <memmove>
 8002822:	68a3      	ldr	r3, [r4, #8]
 8002824:	2000      	movs	r0, #0
 8002826:	1b9b      	subs	r3, r3, r6
 8002828:	60a3      	str	r3, [r4, #8]
 800282a:	6823      	ldr	r3, [r4, #0]
 800282c:	441e      	add	r6, r3
 800282e:	6026      	str	r6, [r4, #0]
 8002830:	e7dc      	b.n	80027ec <__ssputs_r+0x58>
 8002832:	462a      	mov	r2, r5
 8002834:	f000 fb60 	bl	8002ef8 <_realloc_r>
 8002838:	4606      	mov	r6, r0
 800283a:	2800      	cmp	r0, #0
 800283c:	d1e2      	bne.n	8002804 <__ssputs_r+0x70>
 800283e:	6921      	ldr	r1, [r4, #16]
 8002840:	4650      	mov	r0, sl
 8002842:	f000 fab3 	bl	8002dac <_free_r>
 8002846:	e7c8      	b.n	80027da <__ssputs_r+0x46>

08002848 <_svfiprintf_r>:
 8002848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800284c:	461d      	mov	r5, r3
 800284e:	898b      	ldrh	r3, [r1, #12]
 8002850:	b09d      	sub	sp, #116	; 0x74
 8002852:	061f      	lsls	r7, r3, #24
 8002854:	4680      	mov	r8, r0
 8002856:	460c      	mov	r4, r1
 8002858:	4616      	mov	r6, r2
 800285a:	d50f      	bpl.n	800287c <_svfiprintf_r+0x34>
 800285c:	690b      	ldr	r3, [r1, #16]
 800285e:	b96b      	cbnz	r3, 800287c <_svfiprintf_r+0x34>
 8002860:	2140      	movs	r1, #64	; 0x40
 8002862:	f000 faef 	bl	8002e44 <_malloc_r>
 8002866:	6020      	str	r0, [r4, #0]
 8002868:	6120      	str	r0, [r4, #16]
 800286a:	b928      	cbnz	r0, 8002878 <_svfiprintf_r+0x30>
 800286c:	230c      	movs	r3, #12
 800286e:	f8c8 3000 	str.w	r3, [r8]
 8002872:	f04f 30ff 	mov.w	r0, #4294967295
 8002876:	e0c8      	b.n	8002a0a <_svfiprintf_r+0x1c2>
 8002878:	2340      	movs	r3, #64	; 0x40
 800287a:	6163      	str	r3, [r4, #20]
 800287c:	2300      	movs	r3, #0
 800287e:	9309      	str	r3, [sp, #36]	; 0x24
 8002880:	2320      	movs	r3, #32
 8002882:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002886:	2330      	movs	r3, #48	; 0x30
 8002888:	f04f 0b01 	mov.w	fp, #1
 800288c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002890:	9503      	str	r5, [sp, #12]
 8002892:	4637      	mov	r7, r6
 8002894:	463d      	mov	r5, r7
 8002896:	f815 3b01 	ldrb.w	r3, [r5], #1
 800289a:	b10b      	cbz	r3, 80028a0 <_svfiprintf_r+0x58>
 800289c:	2b25      	cmp	r3, #37	; 0x25
 800289e:	d13e      	bne.n	800291e <_svfiprintf_r+0xd6>
 80028a0:	ebb7 0a06 	subs.w	sl, r7, r6
 80028a4:	d00b      	beq.n	80028be <_svfiprintf_r+0x76>
 80028a6:	4653      	mov	r3, sl
 80028a8:	4632      	mov	r2, r6
 80028aa:	4621      	mov	r1, r4
 80028ac:	4640      	mov	r0, r8
 80028ae:	f7ff ff71 	bl	8002794 <__ssputs_r>
 80028b2:	3001      	adds	r0, #1
 80028b4:	f000 80a4 	beq.w	8002a00 <_svfiprintf_r+0x1b8>
 80028b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80028ba:	4453      	add	r3, sl
 80028bc:	9309      	str	r3, [sp, #36]	; 0x24
 80028be:	783b      	ldrb	r3, [r7, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f000 809d 	beq.w	8002a00 <_svfiprintf_r+0x1b8>
 80028c6:	2300      	movs	r3, #0
 80028c8:	f04f 32ff 	mov.w	r2, #4294967295
 80028cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80028d0:	9304      	str	r3, [sp, #16]
 80028d2:	9307      	str	r3, [sp, #28]
 80028d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80028d8:	931a      	str	r3, [sp, #104]	; 0x68
 80028da:	462f      	mov	r7, r5
 80028dc:	2205      	movs	r2, #5
 80028de:	f817 1b01 	ldrb.w	r1, [r7], #1
 80028e2:	4850      	ldr	r0, [pc, #320]	; (8002a24 <_svfiprintf_r+0x1dc>)
 80028e4:	f000 fa30 	bl	8002d48 <memchr>
 80028e8:	9b04      	ldr	r3, [sp, #16]
 80028ea:	b9d0      	cbnz	r0, 8002922 <_svfiprintf_r+0xda>
 80028ec:	06d9      	lsls	r1, r3, #27
 80028ee:	bf44      	itt	mi
 80028f0:	2220      	movmi	r2, #32
 80028f2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80028f6:	071a      	lsls	r2, r3, #28
 80028f8:	bf44      	itt	mi
 80028fa:	222b      	movmi	r2, #43	; 0x2b
 80028fc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002900:	782a      	ldrb	r2, [r5, #0]
 8002902:	2a2a      	cmp	r2, #42	; 0x2a
 8002904:	d015      	beq.n	8002932 <_svfiprintf_r+0xea>
 8002906:	462f      	mov	r7, r5
 8002908:	2000      	movs	r0, #0
 800290a:	250a      	movs	r5, #10
 800290c:	9a07      	ldr	r2, [sp, #28]
 800290e:	4639      	mov	r1, r7
 8002910:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002914:	3b30      	subs	r3, #48	; 0x30
 8002916:	2b09      	cmp	r3, #9
 8002918:	d94d      	bls.n	80029b6 <_svfiprintf_r+0x16e>
 800291a:	b1b8      	cbz	r0, 800294c <_svfiprintf_r+0x104>
 800291c:	e00f      	b.n	800293e <_svfiprintf_r+0xf6>
 800291e:	462f      	mov	r7, r5
 8002920:	e7b8      	b.n	8002894 <_svfiprintf_r+0x4c>
 8002922:	4a40      	ldr	r2, [pc, #256]	; (8002a24 <_svfiprintf_r+0x1dc>)
 8002924:	463d      	mov	r5, r7
 8002926:	1a80      	subs	r0, r0, r2
 8002928:	fa0b f000 	lsl.w	r0, fp, r0
 800292c:	4318      	orrs	r0, r3
 800292e:	9004      	str	r0, [sp, #16]
 8002930:	e7d3      	b.n	80028da <_svfiprintf_r+0x92>
 8002932:	9a03      	ldr	r2, [sp, #12]
 8002934:	1d11      	adds	r1, r2, #4
 8002936:	6812      	ldr	r2, [r2, #0]
 8002938:	9103      	str	r1, [sp, #12]
 800293a:	2a00      	cmp	r2, #0
 800293c:	db01      	blt.n	8002942 <_svfiprintf_r+0xfa>
 800293e:	9207      	str	r2, [sp, #28]
 8002940:	e004      	b.n	800294c <_svfiprintf_r+0x104>
 8002942:	4252      	negs	r2, r2
 8002944:	f043 0302 	orr.w	r3, r3, #2
 8002948:	9207      	str	r2, [sp, #28]
 800294a:	9304      	str	r3, [sp, #16]
 800294c:	783b      	ldrb	r3, [r7, #0]
 800294e:	2b2e      	cmp	r3, #46	; 0x2e
 8002950:	d10c      	bne.n	800296c <_svfiprintf_r+0x124>
 8002952:	787b      	ldrb	r3, [r7, #1]
 8002954:	2b2a      	cmp	r3, #42	; 0x2a
 8002956:	d133      	bne.n	80029c0 <_svfiprintf_r+0x178>
 8002958:	9b03      	ldr	r3, [sp, #12]
 800295a:	3702      	adds	r7, #2
 800295c:	1d1a      	adds	r2, r3, #4
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	9203      	str	r2, [sp, #12]
 8002962:	2b00      	cmp	r3, #0
 8002964:	bfb8      	it	lt
 8002966:	f04f 33ff 	movlt.w	r3, #4294967295
 800296a:	9305      	str	r3, [sp, #20]
 800296c:	4d2e      	ldr	r5, [pc, #184]	; (8002a28 <_svfiprintf_r+0x1e0>)
 800296e:	2203      	movs	r2, #3
 8002970:	7839      	ldrb	r1, [r7, #0]
 8002972:	4628      	mov	r0, r5
 8002974:	f000 f9e8 	bl	8002d48 <memchr>
 8002978:	b138      	cbz	r0, 800298a <_svfiprintf_r+0x142>
 800297a:	2340      	movs	r3, #64	; 0x40
 800297c:	1b40      	subs	r0, r0, r5
 800297e:	fa03 f000 	lsl.w	r0, r3, r0
 8002982:	9b04      	ldr	r3, [sp, #16]
 8002984:	3701      	adds	r7, #1
 8002986:	4303      	orrs	r3, r0
 8002988:	9304      	str	r3, [sp, #16]
 800298a:	7839      	ldrb	r1, [r7, #0]
 800298c:	2206      	movs	r2, #6
 800298e:	4827      	ldr	r0, [pc, #156]	; (8002a2c <_svfiprintf_r+0x1e4>)
 8002990:	1c7e      	adds	r6, r7, #1
 8002992:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002996:	f000 f9d7 	bl	8002d48 <memchr>
 800299a:	2800      	cmp	r0, #0
 800299c:	d038      	beq.n	8002a10 <_svfiprintf_r+0x1c8>
 800299e:	4b24      	ldr	r3, [pc, #144]	; (8002a30 <_svfiprintf_r+0x1e8>)
 80029a0:	bb13      	cbnz	r3, 80029e8 <_svfiprintf_r+0x1a0>
 80029a2:	9b03      	ldr	r3, [sp, #12]
 80029a4:	3307      	adds	r3, #7
 80029a6:	f023 0307 	bic.w	r3, r3, #7
 80029aa:	3308      	adds	r3, #8
 80029ac:	9303      	str	r3, [sp, #12]
 80029ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80029b0:	444b      	add	r3, r9
 80029b2:	9309      	str	r3, [sp, #36]	; 0x24
 80029b4:	e76d      	b.n	8002892 <_svfiprintf_r+0x4a>
 80029b6:	fb05 3202 	mla	r2, r5, r2, r3
 80029ba:	2001      	movs	r0, #1
 80029bc:	460f      	mov	r7, r1
 80029be:	e7a6      	b.n	800290e <_svfiprintf_r+0xc6>
 80029c0:	2300      	movs	r3, #0
 80029c2:	250a      	movs	r5, #10
 80029c4:	4619      	mov	r1, r3
 80029c6:	3701      	adds	r7, #1
 80029c8:	9305      	str	r3, [sp, #20]
 80029ca:	4638      	mov	r0, r7
 80029cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80029d0:	3a30      	subs	r2, #48	; 0x30
 80029d2:	2a09      	cmp	r2, #9
 80029d4:	d903      	bls.n	80029de <_svfiprintf_r+0x196>
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d0c8      	beq.n	800296c <_svfiprintf_r+0x124>
 80029da:	9105      	str	r1, [sp, #20]
 80029dc:	e7c6      	b.n	800296c <_svfiprintf_r+0x124>
 80029de:	fb05 2101 	mla	r1, r5, r1, r2
 80029e2:	2301      	movs	r3, #1
 80029e4:	4607      	mov	r7, r0
 80029e6:	e7f0      	b.n	80029ca <_svfiprintf_r+0x182>
 80029e8:	ab03      	add	r3, sp, #12
 80029ea:	9300      	str	r3, [sp, #0]
 80029ec:	4622      	mov	r2, r4
 80029ee:	4b11      	ldr	r3, [pc, #68]	; (8002a34 <_svfiprintf_r+0x1ec>)
 80029f0:	a904      	add	r1, sp, #16
 80029f2:	4640      	mov	r0, r8
 80029f4:	f3af 8000 	nop.w
 80029f8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80029fc:	4681      	mov	r9, r0
 80029fe:	d1d6      	bne.n	80029ae <_svfiprintf_r+0x166>
 8002a00:	89a3      	ldrh	r3, [r4, #12]
 8002a02:	065b      	lsls	r3, r3, #25
 8002a04:	f53f af35 	bmi.w	8002872 <_svfiprintf_r+0x2a>
 8002a08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002a0a:	b01d      	add	sp, #116	; 0x74
 8002a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a10:	ab03      	add	r3, sp, #12
 8002a12:	9300      	str	r3, [sp, #0]
 8002a14:	4622      	mov	r2, r4
 8002a16:	4b07      	ldr	r3, [pc, #28]	; (8002a34 <_svfiprintf_r+0x1ec>)
 8002a18:	a904      	add	r1, sp, #16
 8002a1a:	4640      	mov	r0, r8
 8002a1c:	f000 f882 	bl	8002b24 <_printf_i>
 8002a20:	e7ea      	b.n	80029f8 <_svfiprintf_r+0x1b0>
 8002a22:	bf00      	nop
 8002a24:	080030d4 	.word	0x080030d4
 8002a28:	080030da 	.word	0x080030da
 8002a2c:	080030de 	.word	0x080030de
 8002a30:	00000000 	.word	0x00000000
 8002a34:	08002795 	.word	0x08002795

08002a38 <_printf_common>:
 8002a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a3c:	4691      	mov	r9, r2
 8002a3e:	461f      	mov	r7, r3
 8002a40:	688a      	ldr	r2, [r1, #8]
 8002a42:	690b      	ldr	r3, [r1, #16]
 8002a44:	4606      	mov	r6, r0
 8002a46:	4293      	cmp	r3, r2
 8002a48:	bfb8      	it	lt
 8002a4a:	4613      	movlt	r3, r2
 8002a4c:	f8c9 3000 	str.w	r3, [r9]
 8002a50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002a54:	460c      	mov	r4, r1
 8002a56:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002a5a:	b112      	cbz	r2, 8002a62 <_printf_common+0x2a>
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	f8c9 3000 	str.w	r3, [r9]
 8002a62:	6823      	ldr	r3, [r4, #0]
 8002a64:	0699      	lsls	r1, r3, #26
 8002a66:	bf42      	ittt	mi
 8002a68:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002a6c:	3302      	addmi	r3, #2
 8002a6e:	f8c9 3000 	strmi.w	r3, [r9]
 8002a72:	6825      	ldr	r5, [r4, #0]
 8002a74:	f015 0506 	ands.w	r5, r5, #6
 8002a78:	d107      	bne.n	8002a8a <_printf_common+0x52>
 8002a7a:	f104 0a19 	add.w	sl, r4, #25
 8002a7e:	68e3      	ldr	r3, [r4, #12]
 8002a80:	f8d9 2000 	ldr.w	r2, [r9]
 8002a84:	1a9b      	subs	r3, r3, r2
 8002a86:	42ab      	cmp	r3, r5
 8002a88:	dc29      	bgt.n	8002ade <_printf_common+0xa6>
 8002a8a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002a8e:	6822      	ldr	r2, [r4, #0]
 8002a90:	3300      	adds	r3, #0
 8002a92:	bf18      	it	ne
 8002a94:	2301      	movne	r3, #1
 8002a96:	0692      	lsls	r2, r2, #26
 8002a98:	d42e      	bmi.n	8002af8 <_printf_common+0xc0>
 8002a9a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002a9e:	4639      	mov	r1, r7
 8002aa0:	4630      	mov	r0, r6
 8002aa2:	47c0      	blx	r8
 8002aa4:	3001      	adds	r0, #1
 8002aa6:	d021      	beq.n	8002aec <_printf_common+0xb4>
 8002aa8:	6823      	ldr	r3, [r4, #0]
 8002aaa:	68e5      	ldr	r5, [r4, #12]
 8002aac:	f003 0306 	and.w	r3, r3, #6
 8002ab0:	2b04      	cmp	r3, #4
 8002ab2:	bf18      	it	ne
 8002ab4:	2500      	movne	r5, #0
 8002ab6:	f8d9 2000 	ldr.w	r2, [r9]
 8002aba:	f04f 0900 	mov.w	r9, #0
 8002abe:	bf08      	it	eq
 8002ac0:	1aad      	subeq	r5, r5, r2
 8002ac2:	68a3      	ldr	r3, [r4, #8]
 8002ac4:	6922      	ldr	r2, [r4, #16]
 8002ac6:	bf08      	it	eq
 8002ac8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002acc:	4293      	cmp	r3, r2
 8002ace:	bfc4      	itt	gt
 8002ad0:	1a9b      	subgt	r3, r3, r2
 8002ad2:	18ed      	addgt	r5, r5, r3
 8002ad4:	341a      	adds	r4, #26
 8002ad6:	454d      	cmp	r5, r9
 8002ad8:	d11a      	bne.n	8002b10 <_printf_common+0xd8>
 8002ada:	2000      	movs	r0, #0
 8002adc:	e008      	b.n	8002af0 <_printf_common+0xb8>
 8002ade:	2301      	movs	r3, #1
 8002ae0:	4652      	mov	r2, sl
 8002ae2:	4639      	mov	r1, r7
 8002ae4:	4630      	mov	r0, r6
 8002ae6:	47c0      	blx	r8
 8002ae8:	3001      	adds	r0, #1
 8002aea:	d103      	bne.n	8002af4 <_printf_common+0xbc>
 8002aec:	f04f 30ff 	mov.w	r0, #4294967295
 8002af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002af4:	3501      	adds	r5, #1
 8002af6:	e7c2      	b.n	8002a7e <_printf_common+0x46>
 8002af8:	2030      	movs	r0, #48	; 0x30
 8002afa:	18e1      	adds	r1, r4, r3
 8002afc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002b00:	1c5a      	adds	r2, r3, #1
 8002b02:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002b06:	4422      	add	r2, r4
 8002b08:	3302      	adds	r3, #2
 8002b0a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002b0e:	e7c4      	b.n	8002a9a <_printf_common+0x62>
 8002b10:	2301      	movs	r3, #1
 8002b12:	4622      	mov	r2, r4
 8002b14:	4639      	mov	r1, r7
 8002b16:	4630      	mov	r0, r6
 8002b18:	47c0      	blx	r8
 8002b1a:	3001      	adds	r0, #1
 8002b1c:	d0e6      	beq.n	8002aec <_printf_common+0xb4>
 8002b1e:	f109 0901 	add.w	r9, r9, #1
 8002b22:	e7d8      	b.n	8002ad6 <_printf_common+0x9e>

08002b24 <_printf_i>:
 8002b24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002b28:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002b2c:	460c      	mov	r4, r1
 8002b2e:	7e09      	ldrb	r1, [r1, #24]
 8002b30:	b085      	sub	sp, #20
 8002b32:	296e      	cmp	r1, #110	; 0x6e
 8002b34:	4617      	mov	r7, r2
 8002b36:	4606      	mov	r6, r0
 8002b38:	4698      	mov	r8, r3
 8002b3a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002b3c:	f000 80b3 	beq.w	8002ca6 <_printf_i+0x182>
 8002b40:	d822      	bhi.n	8002b88 <_printf_i+0x64>
 8002b42:	2963      	cmp	r1, #99	; 0x63
 8002b44:	d036      	beq.n	8002bb4 <_printf_i+0x90>
 8002b46:	d80a      	bhi.n	8002b5e <_printf_i+0x3a>
 8002b48:	2900      	cmp	r1, #0
 8002b4a:	f000 80b9 	beq.w	8002cc0 <_printf_i+0x19c>
 8002b4e:	2958      	cmp	r1, #88	; 0x58
 8002b50:	f000 8083 	beq.w	8002c5a <_printf_i+0x136>
 8002b54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b58:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002b5c:	e032      	b.n	8002bc4 <_printf_i+0xa0>
 8002b5e:	2964      	cmp	r1, #100	; 0x64
 8002b60:	d001      	beq.n	8002b66 <_printf_i+0x42>
 8002b62:	2969      	cmp	r1, #105	; 0x69
 8002b64:	d1f6      	bne.n	8002b54 <_printf_i+0x30>
 8002b66:	6820      	ldr	r0, [r4, #0]
 8002b68:	6813      	ldr	r3, [r2, #0]
 8002b6a:	0605      	lsls	r5, r0, #24
 8002b6c:	f103 0104 	add.w	r1, r3, #4
 8002b70:	d52a      	bpl.n	8002bc8 <_printf_i+0xa4>
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6011      	str	r1, [r2, #0]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	da03      	bge.n	8002b82 <_printf_i+0x5e>
 8002b7a:	222d      	movs	r2, #45	; 0x2d
 8002b7c:	425b      	negs	r3, r3
 8002b7e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002b82:	486f      	ldr	r0, [pc, #444]	; (8002d40 <_printf_i+0x21c>)
 8002b84:	220a      	movs	r2, #10
 8002b86:	e039      	b.n	8002bfc <_printf_i+0xd8>
 8002b88:	2973      	cmp	r1, #115	; 0x73
 8002b8a:	f000 809d 	beq.w	8002cc8 <_printf_i+0x1a4>
 8002b8e:	d808      	bhi.n	8002ba2 <_printf_i+0x7e>
 8002b90:	296f      	cmp	r1, #111	; 0x6f
 8002b92:	d020      	beq.n	8002bd6 <_printf_i+0xb2>
 8002b94:	2970      	cmp	r1, #112	; 0x70
 8002b96:	d1dd      	bne.n	8002b54 <_printf_i+0x30>
 8002b98:	6823      	ldr	r3, [r4, #0]
 8002b9a:	f043 0320 	orr.w	r3, r3, #32
 8002b9e:	6023      	str	r3, [r4, #0]
 8002ba0:	e003      	b.n	8002baa <_printf_i+0x86>
 8002ba2:	2975      	cmp	r1, #117	; 0x75
 8002ba4:	d017      	beq.n	8002bd6 <_printf_i+0xb2>
 8002ba6:	2978      	cmp	r1, #120	; 0x78
 8002ba8:	d1d4      	bne.n	8002b54 <_printf_i+0x30>
 8002baa:	2378      	movs	r3, #120	; 0x78
 8002bac:	4865      	ldr	r0, [pc, #404]	; (8002d44 <_printf_i+0x220>)
 8002bae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002bb2:	e055      	b.n	8002c60 <_printf_i+0x13c>
 8002bb4:	6813      	ldr	r3, [r2, #0]
 8002bb6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002bba:	1d19      	adds	r1, r3, #4
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	6011      	str	r1, [r2, #0]
 8002bc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e08c      	b.n	8002ce2 <_printf_i+0x1be>
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002bce:	6011      	str	r1, [r2, #0]
 8002bd0:	bf18      	it	ne
 8002bd2:	b21b      	sxthne	r3, r3
 8002bd4:	e7cf      	b.n	8002b76 <_printf_i+0x52>
 8002bd6:	6813      	ldr	r3, [r2, #0]
 8002bd8:	6825      	ldr	r5, [r4, #0]
 8002bda:	1d18      	adds	r0, r3, #4
 8002bdc:	6010      	str	r0, [r2, #0]
 8002bde:	0628      	lsls	r0, r5, #24
 8002be0:	d501      	bpl.n	8002be6 <_printf_i+0xc2>
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	e002      	b.n	8002bec <_printf_i+0xc8>
 8002be6:	0668      	lsls	r0, r5, #25
 8002be8:	d5fb      	bpl.n	8002be2 <_printf_i+0xbe>
 8002bea:	881b      	ldrh	r3, [r3, #0]
 8002bec:	296f      	cmp	r1, #111	; 0x6f
 8002bee:	bf14      	ite	ne
 8002bf0:	220a      	movne	r2, #10
 8002bf2:	2208      	moveq	r2, #8
 8002bf4:	4852      	ldr	r0, [pc, #328]	; (8002d40 <_printf_i+0x21c>)
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002bfc:	6865      	ldr	r5, [r4, #4]
 8002bfe:	2d00      	cmp	r5, #0
 8002c00:	60a5      	str	r5, [r4, #8]
 8002c02:	f2c0 8095 	blt.w	8002d30 <_printf_i+0x20c>
 8002c06:	6821      	ldr	r1, [r4, #0]
 8002c08:	f021 0104 	bic.w	r1, r1, #4
 8002c0c:	6021      	str	r1, [r4, #0]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d13d      	bne.n	8002c8e <_printf_i+0x16a>
 8002c12:	2d00      	cmp	r5, #0
 8002c14:	f040 808e 	bne.w	8002d34 <_printf_i+0x210>
 8002c18:	4665      	mov	r5, ip
 8002c1a:	2a08      	cmp	r2, #8
 8002c1c:	d10b      	bne.n	8002c36 <_printf_i+0x112>
 8002c1e:	6823      	ldr	r3, [r4, #0]
 8002c20:	07db      	lsls	r3, r3, #31
 8002c22:	d508      	bpl.n	8002c36 <_printf_i+0x112>
 8002c24:	6923      	ldr	r3, [r4, #16]
 8002c26:	6862      	ldr	r2, [r4, #4]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	bfde      	ittt	le
 8002c2c:	2330      	movle	r3, #48	; 0x30
 8002c2e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002c32:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002c36:	ebac 0305 	sub.w	r3, ip, r5
 8002c3a:	6123      	str	r3, [r4, #16]
 8002c3c:	f8cd 8000 	str.w	r8, [sp]
 8002c40:	463b      	mov	r3, r7
 8002c42:	aa03      	add	r2, sp, #12
 8002c44:	4621      	mov	r1, r4
 8002c46:	4630      	mov	r0, r6
 8002c48:	f7ff fef6 	bl	8002a38 <_printf_common>
 8002c4c:	3001      	adds	r0, #1
 8002c4e:	d14d      	bne.n	8002cec <_printf_i+0x1c8>
 8002c50:	f04f 30ff 	mov.w	r0, #4294967295
 8002c54:	b005      	add	sp, #20
 8002c56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002c5a:	4839      	ldr	r0, [pc, #228]	; (8002d40 <_printf_i+0x21c>)
 8002c5c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002c60:	6813      	ldr	r3, [r2, #0]
 8002c62:	6821      	ldr	r1, [r4, #0]
 8002c64:	1d1d      	adds	r5, r3, #4
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	6015      	str	r5, [r2, #0]
 8002c6a:	060a      	lsls	r2, r1, #24
 8002c6c:	d50b      	bpl.n	8002c86 <_printf_i+0x162>
 8002c6e:	07ca      	lsls	r2, r1, #31
 8002c70:	bf44      	itt	mi
 8002c72:	f041 0120 	orrmi.w	r1, r1, #32
 8002c76:	6021      	strmi	r1, [r4, #0]
 8002c78:	b91b      	cbnz	r3, 8002c82 <_printf_i+0x15e>
 8002c7a:	6822      	ldr	r2, [r4, #0]
 8002c7c:	f022 0220 	bic.w	r2, r2, #32
 8002c80:	6022      	str	r2, [r4, #0]
 8002c82:	2210      	movs	r2, #16
 8002c84:	e7b7      	b.n	8002bf6 <_printf_i+0xd2>
 8002c86:	064d      	lsls	r5, r1, #25
 8002c88:	bf48      	it	mi
 8002c8a:	b29b      	uxthmi	r3, r3
 8002c8c:	e7ef      	b.n	8002c6e <_printf_i+0x14a>
 8002c8e:	4665      	mov	r5, ip
 8002c90:	fbb3 f1f2 	udiv	r1, r3, r2
 8002c94:	fb02 3311 	mls	r3, r2, r1, r3
 8002c98:	5cc3      	ldrb	r3, [r0, r3]
 8002c9a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	2900      	cmp	r1, #0
 8002ca2:	d1f5      	bne.n	8002c90 <_printf_i+0x16c>
 8002ca4:	e7b9      	b.n	8002c1a <_printf_i+0xf6>
 8002ca6:	6813      	ldr	r3, [r2, #0]
 8002ca8:	6825      	ldr	r5, [r4, #0]
 8002caa:	1d18      	adds	r0, r3, #4
 8002cac:	6961      	ldr	r1, [r4, #20]
 8002cae:	6010      	str	r0, [r2, #0]
 8002cb0:	0628      	lsls	r0, r5, #24
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	d501      	bpl.n	8002cba <_printf_i+0x196>
 8002cb6:	6019      	str	r1, [r3, #0]
 8002cb8:	e002      	b.n	8002cc0 <_printf_i+0x19c>
 8002cba:	066a      	lsls	r2, r5, #25
 8002cbc:	d5fb      	bpl.n	8002cb6 <_printf_i+0x192>
 8002cbe:	8019      	strh	r1, [r3, #0]
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	4665      	mov	r5, ip
 8002cc4:	6123      	str	r3, [r4, #16]
 8002cc6:	e7b9      	b.n	8002c3c <_printf_i+0x118>
 8002cc8:	6813      	ldr	r3, [r2, #0]
 8002cca:	1d19      	adds	r1, r3, #4
 8002ccc:	6011      	str	r1, [r2, #0]
 8002cce:	681d      	ldr	r5, [r3, #0]
 8002cd0:	6862      	ldr	r2, [r4, #4]
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	4628      	mov	r0, r5
 8002cd6:	f000 f837 	bl	8002d48 <memchr>
 8002cda:	b108      	cbz	r0, 8002ce0 <_printf_i+0x1bc>
 8002cdc:	1b40      	subs	r0, r0, r5
 8002cde:	6060      	str	r0, [r4, #4]
 8002ce0:	6863      	ldr	r3, [r4, #4]
 8002ce2:	6123      	str	r3, [r4, #16]
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002cea:	e7a7      	b.n	8002c3c <_printf_i+0x118>
 8002cec:	6923      	ldr	r3, [r4, #16]
 8002cee:	462a      	mov	r2, r5
 8002cf0:	4639      	mov	r1, r7
 8002cf2:	4630      	mov	r0, r6
 8002cf4:	47c0      	blx	r8
 8002cf6:	3001      	adds	r0, #1
 8002cf8:	d0aa      	beq.n	8002c50 <_printf_i+0x12c>
 8002cfa:	6823      	ldr	r3, [r4, #0]
 8002cfc:	079b      	lsls	r3, r3, #30
 8002cfe:	d413      	bmi.n	8002d28 <_printf_i+0x204>
 8002d00:	68e0      	ldr	r0, [r4, #12]
 8002d02:	9b03      	ldr	r3, [sp, #12]
 8002d04:	4298      	cmp	r0, r3
 8002d06:	bfb8      	it	lt
 8002d08:	4618      	movlt	r0, r3
 8002d0a:	e7a3      	b.n	8002c54 <_printf_i+0x130>
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	464a      	mov	r2, r9
 8002d10:	4639      	mov	r1, r7
 8002d12:	4630      	mov	r0, r6
 8002d14:	47c0      	blx	r8
 8002d16:	3001      	adds	r0, #1
 8002d18:	d09a      	beq.n	8002c50 <_printf_i+0x12c>
 8002d1a:	3501      	adds	r5, #1
 8002d1c:	68e3      	ldr	r3, [r4, #12]
 8002d1e:	9a03      	ldr	r2, [sp, #12]
 8002d20:	1a9b      	subs	r3, r3, r2
 8002d22:	42ab      	cmp	r3, r5
 8002d24:	dcf2      	bgt.n	8002d0c <_printf_i+0x1e8>
 8002d26:	e7eb      	b.n	8002d00 <_printf_i+0x1dc>
 8002d28:	2500      	movs	r5, #0
 8002d2a:	f104 0919 	add.w	r9, r4, #25
 8002d2e:	e7f5      	b.n	8002d1c <_printf_i+0x1f8>
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d1ac      	bne.n	8002c8e <_printf_i+0x16a>
 8002d34:	7803      	ldrb	r3, [r0, #0]
 8002d36:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d3a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d3e:	e76c      	b.n	8002c1a <_printf_i+0xf6>
 8002d40:	080030e5 	.word	0x080030e5
 8002d44:	080030f6 	.word	0x080030f6

08002d48 <memchr>:
 8002d48:	b510      	push	{r4, lr}
 8002d4a:	b2c9      	uxtb	r1, r1
 8002d4c:	4402      	add	r2, r0
 8002d4e:	4290      	cmp	r0, r2
 8002d50:	4603      	mov	r3, r0
 8002d52:	d101      	bne.n	8002d58 <memchr+0x10>
 8002d54:	2300      	movs	r3, #0
 8002d56:	e003      	b.n	8002d60 <memchr+0x18>
 8002d58:	781c      	ldrb	r4, [r3, #0]
 8002d5a:	3001      	adds	r0, #1
 8002d5c:	428c      	cmp	r4, r1
 8002d5e:	d1f6      	bne.n	8002d4e <memchr+0x6>
 8002d60:	4618      	mov	r0, r3
 8002d62:	bd10      	pop	{r4, pc}

08002d64 <memcpy>:
 8002d64:	b510      	push	{r4, lr}
 8002d66:	1e43      	subs	r3, r0, #1
 8002d68:	440a      	add	r2, r1
 8002d6a:	4291      	cmp	r1, r2
 8002d6c:	d100      	bne.n	8002d70 <memcpy+0xc>
 8002d6e:	bd10      	pop	{r4, pc}
 8002d70:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002d74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002d78:	e7f7      	b.n	8002d6a <memcpy+0x6>

08002d7a <memmove>:
 8002d7a:	4288      	cmp	r0, r1
 8002d7c:	b510      	push	{r4, lr}
 8002d7e:	eb01 0302 	add.w	r3, r1, r2
 8002d82:	d807      	bhi.n	8002d94 <memmove+0x1a>
 8002d84:	1e42      	subs	r2, r0, #1
 8002d86:	4299      	cmp	r1, r3
 8002d88:	d00a      	beq.n	8002da0 <memmove+0x26>
 8002d8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002d8e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002d92:	e7f8      	b.n	8002d86 <memmove+0xc>
 8002d94:	4283      	cmp	r3, r0
 8002d96:	d9f5      	bls.n	8002d84 <memmove+0xa>
 8002d98:	1881      	adds	r1, r0, r2
 8002d9a:	1ad2      	subs	r2, r2, r3
 8002d9c:	42d3      	cmn	r3, r2
 8002d9e:	d100      	bne.n	8002da2 <memmove+0x28>
 8002da0:	bd10      	pop	{r4, pc}
 8002da2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002da6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002daa:	e7f7      	b.n	8002d9c <memmove+0x22>

08002dac <_free_r>:
 8002dac:	b538      	push	{r3, r4, r5, lr}
 8002dae:	4605      	mov	r5, r0
 8002db0:	2900      	cmp	r1, #0
 8002db2:	d043      	beq.n	8002e3c <_free_r+0x90>
 8002db4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002db8:	1f0c      	subs	r4, r1, #4
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	bfb8      	it	lt
 8002dbe:	18e4      	addlt	r4, r4, r3
 8002dc0:	f000 f8d0 	bl	8002f64 <__malloc_lock>
 8002dc4:	4a1e      	ldr	r2, [pc, #120]	; (8002e40 <_free_r+0x94>)
 8002dc6:	6813      	ldr	r3, [r2, #0]
 8002dc8:	4610      	mov	r0, r2
 8002dca:	b933      	cbnz	r3, 8002dda <_free_r+0x2e>
 8002dcc:	6063      	str	r3, [r4, #4]
 8002dce:	6014      	str	r4, [r2, #0]
 8002dd0:	4628      	mov	r0, r5
 8002dd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002dd6:	f000 b8c6 	b.w	8002f66 <__malloc_unlock>
 8002dda:	42a3      	cmp	r3, r4
 8002ddc:	d90b      	bls.n	8002df6 <_free_r+0x4a>
 8002dde:	6821      	ldr	r1, [r4, #0]
 8002de0:	1862      	adds	r2, r4, r1
 8002de2:	4293      	cmp	r3, r2
 8002de4:	bf01      	itttt	eq
 8002de6:	681a      	ldreq	r2, [r3, #0]
 8002de8:	685b      	ldreq	r3, [r3, #4]
 8002dea:	1852      	addeq	r2, r2, r1
 8002dec:	6022      	streq	r2, [r4, #0]
 8002dee:	6063      	str	r3, [r4, #4]
 8002df0:	6004      	str	r4, [r0, #0]
 8002df2:	e7ed      	b.n	8002dd0 <_free_r+0x24>
 8002df4:	4613      	mov	r3, r2
 8002df6:	685a      	ldr	r2, [r3, #4]
 8002df8:	b10a      	cbz	r2, 8002dfe <_free_r+0x52>
 8002dfa:	42a2      	cmp	r2, r4
 8002dfc:	d9fa      	bls.n	8002df4 <_free_r+0x48>
 8002dfe:	6819      	ldr	r1, [r3, #0]
 8002e00:	1858      	adds	r0, r3, r1
 8002e02:	42a0      	cmp	r0, r4
 8002e04:	d10b      	bne.n	8002e1e <_free_r+0x72>
 8002e06:	6820      	ldr	r0, [r4, #0]
 8002e08:	4401      	add	r1, r0
 8002e0a:	1858      	adds	r0, r3, r1
 8002e0c:	4282      	cmp	r2, r0
 8002e0e:	6019      	str	r1, [r3, #0]
 8002e10:	d1de      	bne.n	8002dd0 <_free_r+0x24>
 8002e12:	6810      	ldr	r0, [r2, #0]
 8002e14:	6852      	ldr	r2, [r2, #4]
 8002e16:	4401      	add	r1, r0
 8002e18:	6019      	str	r1, [r3, #0]
 8002e1a:	605a      	str	r2, [r3, #4]
 8002e1c:	e7d8      	b.n	8002dd0 <_free_r+0x24>
 8002e1e:	d902      	bls.n	8002e26 <_free_r+0x7a>
 8002e20:	230c      	movs	r3, #12
 8002e22:	602b      	str	r3, [r5, #0]
 8002e24:	e7d4      	b.n	8002dd0 <_free_r+0x24>
 8002e26:	6820      	ldr	r0, [r4, #0]
 8002e28:	1821      	adds	r1, r4, r0
 8002e2a:	428a      	cmp	r2, r1
 8002e2c:	bf01      	itttt	eq
 8002e2e:	6811      	ldreq	r1, [r2, #0]
 8002e30:	6852      	ldreq	r2, [r2, #4]
 8002e32:	1809      	addeq	r1, r1, r0
 8002e34:	6021      	streq	r1, [r4, #0]
 8002e36:	6062      	str	r2, [r4, #4]
 8002e38:	605c      	str	r4, [r3, #4]
 8002e3a:	e7c9      	b.n	8002dd0 <_free_r+0x24>
 8002e3c:	bd38      	pop	{r3, r4, r5, pc}
 8002e3e:	bf00      	nop
 8002e40:	2000009c 	.word	0x2000009c

08002e44 <_malloc_r>:
 8002e44:	b570      	push	{r4, r5, r6, lr}
 8002e46:	1ccd      	adds	r5, r1, #3
 8002e48:	f025 0503 	bic.w	r5, r5, #3
 8002e4c:	3508      	adds	r5, #8
 8002e4e:	2d0c      	cmp	r5, #12
 8002e50:	bf38      	it	cc
 8002e52:	250c      	movcc	r5, #12
 8002e54:	2d00      	cmp	r5, #0
 8002e56:	4606      	mov	r6, r0
 8002e58:	db01      	blt.n	8002e5e <_malloc_r+0x1a>
 8002e5a:	42a9      	cmp	r1, r5
 8002e5c:	d903      	bls.n	8002e66 <_malloc_r+0x22>
 8002e5e:	230c      	movs	r3, #12
 8002e60:	6033      	str	r3, [r6, #0]
 8002e62:	2000      	movs	r0, #0
 8002e64:	bd70      	pop	{r4, r5, r6, pc}
 8002e66:	f000 f87d 	bl	8002f64 <__malloc_lock>
 8002e6a:	4a21      	ldr	r2, [pc, #132]	; (8002ef0 <_malloc_r+0xac>)
 8002e6c:	6814      	ldr	r4, [r2, #0]
 8002e6e:	4621      	mov	r1, r4
 8002e70:	b991      	cbnz	r1, 8002e98 <_malloc_r+0x54>
 8002e72:	4c20      	ldr	r4, [pc, #128]	; (8002ef4 <_malloc_r+0xb0>)
 8002e74:	6823      	ldr	r3, [r4, #0]
 8002e76:	b91b      	cbnz	r3, 8002e80 <_malloc_r+0x3c>
 8002e78:	4630      	mov	r0, r6
 8002e7a:	f000 f863 	bl	8002f44 <_sbrk_r>
 8002e7e:	6020      	str	r0, [r4, #0]
 8002e80:	4629      	mov	r1, r5
 8002e82:	4630      	mov	r0, r6
 8002e84:	f000 f85e 	bl	8002f44 <_sbrk_r>
 8002e88:	1c43      	adds	r3, r0, #1
 8002e8a:	d124      	bne.n	8002ed6 <_malloc_r+0x92>
 8002e8c:	230c      	movs	r3, #12
 8002e8e:	4630      	mov	r0, r6
 8002e90:	6033      	str	r3, [r6, #0]
 8002e92:	f000 f868 	bl	8002f66 <__malloc_unlock>
 8002e96:	e7e4      	b.n	8002e62 <_malloc_r+0x1e>
 8002e98:	680b      	ldr	r3, [r1, #0]
 8002e9a:	1b5b      	subs	r3, r3, r5
 8002e9c:	d418      	bmi.n	8002ed0 <_malloc_r+0x8c>
 8002e9e:	2b0b      	cmp	r3, #11
 8002ea0:	d90f      	bls.n	8002ec2 <_malloc_r+0x7e>
 8002ea2:	600b      	str	r3, [r1, #0]
 8002ea4:	18cc      	adds	r4, r1, r3
 8002ea6:	50cd      	str	r5, [r1, r3]
 8002ea8:	4630      	mov	r0, r6
 8002eaa:	f000 f85c 	bl	8002f66 <__malloc_unlock>
 8002eae:	f104 000b 	add.w	r0, r4, #11
 8002eb2:	1d23      	adds	r3, r4, #4
 8002eb4:	f020 0007 	bic.w	r0, r0, #7
 8002eb8:	1ac3      	subs	r3, r0, r3
 8002eba:	d0d3      	beq.n	8002e64 <_malloc_r+0x20>
 8002ebc:	425a      	negs	r2, r3
 8002ebe:	50e2      	str	r2, [r4, r3]
 8002ec0:	e7d0      	b.n	8002e64 <_malloc_r+0x20>
 8002ec2:	684b      	ldr	r3, [r1, #4]
 8002ec4:	428c      	cmp	r4, r1
 8002ec6:	bf16      	itet	ne
 8002ec8:	6063      	strne	r3, [r4, #4]
 8002eca:	6013      	streq	r3, [r2, #0]
 8002ecc:	460c      	movne	r4, r1
 8002ece:	e7eb      	b.n	8002ea8 <_malloc_r+0x64>
 8002ed0:	460c      	mov	r4, r1
 8002ed2:	6849      	ldr	r1, [r1, #4]
 8002ed4:	e7cc      	b.n	8002e70 <_malloc_r+0x2c>
 8002ed6:	1cc4      	adds	r4, r0, #3
 8002ed8:	f024 0403 	bic.w	r4, r4, #3
 8002edc:	42a0      	cmp	r0, r4
 8002ede:	d005      	beq.n	8002eec <_malloc_r+0xa8>
 8002ee0:	1a21      	subs	r1, r4, r0
 8002ee2:	4630      	mov	r0, r6
 8002ee4:	f000 f82e 	bl	8002f44 <_sbrk_r>
 8002ee8:	3001      	adds	r0, #1
 8002eea:	d0cf      	beq.n	8002e8c <_malloc_r+0x48>
 8002eec:	6025      	str	r5, [r4, #0]
 8002eee:	e7db      	b.n	8002ea8 <_malloc_r+0x64>
 8002ef0:	2000009c 	.word	0x2000009c
 8002ef4:	200000a0 	.word	0x200000a0

08002ef8 <_realloc_r>:
 8002ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002efa:	4607      	mov	r7, r0
 8002efc:	4614      	mov	r4, r2
 8002efe:	460e      	mov	r6, r1
 8002f00:	b921      	cbnz	r1, 8002f0c <_realloc_r+0x14>
 8002f02:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002f06:	4611      	mov	r1, r2
 8002f08:	f7ff bf9c 	b.w	8002e44 <_malloc_r>
 8002f0c:	b922      	cbnz	r2, 8002f18 <_realloc_r+0x20>
 8002f0e:	f7ff ff4d 	bl	8002dac <_free_r>
 8002f12:	4625      	mov	r5, r4
 8002f14:	4628      	mov	r0, r5
 8002f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f18:	f000 f826 	bl	8002f68 <_malloc_usable_size_r>
 8002f1c:	42a0      	cmp	r0, r4
 8002f1e:	d20f      	bcs.n	8002f40 <_realloc_r+0x48>
 8002f20:	4621      	mov	r1, r4
 8002f22:	4638      	mov	r0, r7
 8002f24:	f7ff ff8e 	bl	8002e44 <_malloc_r>
 8002f28:	4605      	mov	r5, r0
 8002f2a:	2800      	cmp	r0, #0
 8002f2c:	d0f2      	beq.n	8002f14 <_realloc_r+0x1c>
 8002f2e:	4631      	mov	r1, r6
 8002f30:	4622      	mov	r2, r4
 8002f32:	f7ff ff17 	bl	8002d64 <memcpy>
 8002f36:	4631      	mov	r1, r6
 8002f38:	4638      	mov	r0, r7
 8002f3a:	f7ff ff37 	bl	8002dac <_free_r>
 8002f3e:	e7e9      	b.n	8002f14 <_realloc_r+0x1c>
 8002f40:	4635      	mov	r5, r6
 8002f42:	e7e7      	b.n	8002f14 <_realloc_r+0x1c>

08002f44 <_sbrk_r>:
 8002f44:	b538      	push	{r3, r4, r5, lr}
 8002f46:	2300      	movs	r3, #0
 8002f48:	4c05      	ldr	r4, [pc, #20]	; (8002f60 <_sbrk_r+0x1c>)
 8002f4a:	4605      	mov	r5, r0
 8002f4c:	4608      	mov	r0, r1
 8002f4e:	6023      	str	r3, [r4, #0]
 8002f50:	f7ff fb48 	bl	80025e4 <_sbrk>
 8002f54:	1c43      	adds	r3, r0, #1
 8002f56:	d102      	bne.n	8002f5e <_sbrk_r+0x1a>
 8002f58:	6823      	ldr	r3, [r4, #0]
 8002f5a:	b103      	cbz	r3, 8002f5e <_sbrk_r+0x1a>
 8002f5c:	602b      	str	r3, [r5, #0]
 8002f5e:	bd38      	pop	{r3, r4, r5, pc}
 8002f60:	200000ec 	.word	0x200000ec

08002f64 <__malloc_lock>:
 8002f64:	4770      	bx	lr

08002f66 <__malloc_unlock>:
 8002f66:	4770      	bx	lr

08002f68 <_malloc_usable_size_r>:
 8002f68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f6c:	1f18      	subs	r0, r3, #4
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	bfbc      	itt	lt
 8002f72:	580b      	ldrlt	r3, [r1, r0]
 8002f74:	18c0      	addlt	r0, r0, r3
 8002f76:	4770      	bx	lr

08002f78 <_init>:
 8002f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f7a:	bf00      	nop
 8002f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f7e:	bc08      	pop	{r3}
 8002f80:	469e      	mov	lr, r3
 8002f82:	4770      	bx	lr

08002f84 <_fini>:
 8002f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f86:	bf00      	nop
 8002f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f8a:	bc08      	pop	{r3}
 8002f8c:	469e      	mov	lr, r3
 8002f8e:	4770      	bx	lr
